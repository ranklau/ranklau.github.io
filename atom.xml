<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[rank's blog]]></title>
  <subtitle><![CDATA[Border is just for crossing]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://rank.im/"/>
  <updated>2014-05-11T09:53:56.809Z</updated>
  <id>http://rank.im/</id>
  
  <author>
    <name><![CDATA[rank]]></name>
    <email><![CDATA[ranklau@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用 hexo 在 github page 搭建博客]]></title>
    <link href="http://rank.im/2014/03/10/hexo-for-blog/"/>
    <id>http://rank.im/2014/03/10/hexo-for-blog/</id>
    <published>2014-03-10T13:40:27.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>这两天把博客新迁在 github page 上，这两天抽空注册了新域名，并且在 github pages 上搭建了新的博客，还用了逼格极高的 hexo 。 </p>
<p>在 github pages 上搭建静态博客不只 hexo ，排名前 5 的系统有：</p>
<ul>
<li><a href="https://github.com/mojombo/jekyll" target="_blank">mojombo/jekyll</a>  最著名的静态博客引擎 (ruby) </li>
<li><a href="https://github.com/imathis/octopress" target="_blank">imathis/octopress</a>  jekyll 的一个框架，降低了使用难度</li>
<li><a href="https://github.com/tommy351/hexo" target="_blank">tommy351/hexo</a>  使用 NodeJS 编写的静态博客生成器</li>
<li><a href="https://github.com/getpelican/pelican" target="_blank">getpelican/pelican</a>  Python 编写的静态博客生成器</li>
<li><a href="https://github.com/lepture/liquidluck" target="_blank">lepture/liquidluck</a>  同样也是 Python 的系统</li>
</ul>
<p>官方推荐的是 <a href="https://github.com/mojombo/jekyll" target="_blank">jekyll</a> 。</p>
<p>我用 hexo 主要想借机多熟悉下 NodeJS ，另外也先看了简介使用，感觉 hexo 上手也相对容易， markdown 语言来写内容。<br>如果你想对这几种静态博客进行系统比较的话，可自行测试，或 <a href="http://www.zhihu.com/question/21981094" target="_blank"> 参考这篇贴子 </a> 。</p>
<p>hexo 的配置及使用官方有比较详细的 <a href="http://zespia.tw/hexo/docs/" target="_blank"> 文档 </a> ，有一位热心同学写了较为详细的博文 《 <a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank">hexo 你的博客 </a> 》 。  </p>
<p>有一些问题他没有提及，我补充一下：</p>
<ul>
<li><a href="https://github.com/tommy351/hexo/wiki/Themes" target="_blank"> 这里 </a> 有详细的官方推荐皮肤。目前我使用的是 <a href="https://github.com/heroicyang/hexo-theme-modernist" target="_blank">modernist</a> ，如果你对皮肤要求比较高的话，恐怕 theme 上没有太满意的，只能自己设计。:(</li>
<li><a href="http://zespia.tw/hexo/docs/" target="_blank"> 文档 </a> 。看上去挺全的，但很多地方『点到即止』，所以才看到有很多使用说明都是自己搭建过的同学写出来的经验之谈，不过这没关系，结合 google baidu 来使用就可以了。</li>
<li><a href="http://zespia.tw/hexo/docs/migration.html" target="_blank"> 迁移 </a> 。 关键的功能从 rss 导入功能
&quot;hexo migrate rss <a href="http://rank.im/atom.xml">http://rank.im/atom.xml</a>&quot; 居然不能用。我哪天 fix 了放出来给大家。</li>
</ul>
]]></content>
    
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[换域名，重新开博]]></title>
    <link href="http://rank.im/2014/03/07/new-blog-start/"/>
    <id>http://rank.im/2014/03/07/new-blog-start/</id>
    <published>2014-03-07T09:04:20.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>注册了一个比较帅的域名 <a href="http://rank.im">rank.im</a> ，用于个人站点。<br>把原来的很古老的博客系统换成现在比较流行，逼格比较高的 hexo 。  </p>
<p>虽然原来我的博客在 G reader 的订阅数也有 1K 多，抛弃历史包袱从头再开始是个不错的选择。:)<br>此篇是个新的开始。</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[android/ios 开发切图神器 cutandslice]]></title>
    <link href="http://rank.im/2013/10/09/cutandslice/"/>
    <id>http://rank.im/2013/10/09/cutandslice/</id>
    <published>2013-10-09T11:12:05.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>在多端开发时切图是个很痛苦的事，如果有一个很好的工具必将解决掉很多很繁琐的工作。<br>最近试用了一款软件「 cutandslice 」，觉得不错，推荐给大家。<br>官网： <a href="http://www.cutandslice.me/" target="_blank">http://www.cutandslice.me/</a><br>作者从简介上来看是一名 ue 设计师。  </p>
<p>用了之后你会发现其实开发的原理不难：<br>用了很多 PS 里自己的「宏」来解决问题，程序只处理了规则（ rule ）。</p>
<p>这个思路很赞。</p>
<p><img src="http://www.cutandslice.me/css/layout/v1/ui/plugin.png" alt="&#39;cutandslice&#39;"></p>
<a id="more"></a>

<p>cutandslice 能解决你下面的问题：</p>
<ul>
<li>解决 ios 的 @2x.png 的分辩率问题</li>
<li>解决 android 的多分辩率的问题</li>
<li>解决 web 下也需要导出图片的问题</li>
<li>自动切图 - 注意是切图，不是生成 html ，只是根据一些简单规则自动切好图放到相应的文件夹里。</li>
</ul>
<p>它的规则也非常简单，只有 3 条：</p>
<ol>
<li>要输出图的单位以图层文件夹 ( 组 ) 为单位， 文件夹命名末尾加「@」为结束符。并且，自动切除边界外透明的像素。</li>
<li>以「#」名字命名的图层可以认为是选择图片输出的边界。<br>如：输出背景图可将图层组命名为「 bg@」，组里有两个图层：<ul>
<li>1 是大背景图片；</li>
<li>2 是横向 1 个像素形状图层,并且此图层命名为「#」。</li>
</ul>
</li>
<li>button 是一种特殊的组。以「_BTN 」结尾认为是按钮，有多种状态支持：<ul>
<li>normal</li>
<li>hover</li>
<li>clicked / pressed</li>
<li>selected</li>
<li>disabled</li>
</ul>
</li>
</ol>
<p>输出图片时也会自动按按钮状态 「 btn_xxx_normal 」和「 btn_xxx_hover 」来命名，非常方便。</p>
<p>要看更详细的使用说明，可移步：<br><a href="http://www.zcool.com.cn/article/ZNDYzODA=.html" target="_blank">http://www.zcool.com.cn/article/ZNDYzODA=.html</a></p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<p>在多端开发时切图是个很痛苦的事，如果有一个很好的工具必将解决掉很多很繁琐的工作。<br>最近试用了一款软件「 cutandslice 」，觉得不错，推荐给大家。<br>官网： <a href="http://www.cutandslice.me/" target="_blank">http://www.cutandslice.me/</a><br>作者从简介上来看是一名 ue 设计师。  </p>
<p>用了之后你会发现其实开发的原理不难：<br>用了很多 PS 里自己的「宏」来解决问题，程序只处理了规则（ rule ）。</p>
<p>这个思路很赞。</p>
<p><img src="http://www.cutandslice.me/css/layout/v1/ui/plugin.png" alt="&#39;cutandslice&#39;"></p>
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[取得当前脚本元素的路径的一个特例]]></title>
    <link href="http://rank.im/2012/12/13/get-script-path/"/>
    <id>http://rank.im/2012/12/13/get-script-path/</id>
    <published>2012-12-13T06:54:40.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>在正常情况下，无 defer 或 async 属性要准确取得当前脚本执行路径，在不同浏览器里有两种办法：</p>
<ol>
<li>在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript" target="_blank">MDC</a> 里可查看到用 document.currentScript 拿到当前运用的 script 路径。除此属性外还可通过它的子属性 「 document.currentScript.async 」 来查看「异步」还是「同步」加载。</li>
<li>用 document.scripts 得到最后一个 script.src ，但需注意 readyState 是否为 「 interactive 」状态。</li>
</ol>
<a id="more"></a>

<p>简单实现代码如下：</p>
<figure class="highlight js"><pre>	 
	<span class="function"><span class="keyword">function</span> <span class="title">getCurrentScriptPath</span><span class="params">()</span> {</span>
		 <span class="comment">//currentScript</span>
		 <span class="keyword">if</span> (document.hasOwnProperty(<span class="string">'currentScript'</span>)) {
		   <span class="keyword">return</span> document.currentScript.src;
		 }
		 <span class="keyword">var</span> scripts = document.scripts || document.getElementsByTagName(<span class="string">'script'</span>),
		   len = scripts.length,
		   state = <span class="string">'interactive'</span>;
		 <span class="comment">//兼容 IE</span>
		 <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt;len; i++) {
		   <span class="keyword">if</span> (scripts[i].readyState==state) {
		     <span class="keyword">return</span> scripts[i].src;
		   }
		 }
		 <span class="comment">//webkit</span>
		 <span class="keyword">return</span> scripts[len-<span class="number">1</span>].src;
	}	
</pre></figure>


<p>最近在开发中遇到一个 readyState 在 IE 下的特例：</p>
<ul>
<li>page.html 里引入一个外链的脚本 a.js 。</li>
<li>a.js 里有两个外链脚本： a.a.js 和 a.b.js 。「注：这是用 document.write 来引入脚本。」</li>
</ul>
<p>page.html 代码：</p>
<pre><code>&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;script src=&quot;a.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>a.js 代码：</p>
<pre><code>document.write(&#39;&lt;script src=&quot;a.a.js&quot;&gt;&lt;\/script&gt;&#39;);
document.write(&#39;&lt;script src=&quot;a.b.js&quot;&gt;&lt;\/script&gt;&#39;);
</code></pre><p>在浏览器 IE6 至 IE10 里：</p>
<p>我们在 a.a.js 里将所有脚本元素打印出 readyState ：</p>
<ul>
<li>a.js -- complete</li>
<li>a.a.js -- interactive</li>
<li>a.b.js -- loaded</li>
</ul>
<p>上述的 log 告诉我们，从 readyState 状态上看:<br>其实 IE 里已经加载了 a.js, a.a.js, a.b.js 了。</p>
]]></content>
    <summary type="html"><![CDATA[<p>在正常情况下，无 defer 或 async 属性要准确取得当前脚本执行路径，在不同浏览器里有两种办法：</p>
<ol>
<li>在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript" target="_blank">MDC</a> 里可查看到用 document.currentScript 拿到当前运用的 script 路径。除此属性外还可通过它的子属性 「 document.currentScript.async 」 来查看「异步」还是「同步」加载。</li>
<li>用 document.scripts 得到最后一个 script.src ，但需注意 readyState 是否为 「 interactive 」状态。</li>
</ol>
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SWFUpload 2.5 bug 修改 (2)]]></title>
    <link href="http://rank.im/2012/09/12/fix-swfupload2.5-2/"/>
    <id>http://rank.im/2012/09/12/fix-swfupload2.5-2/</id>
    <published>2012-09-12T03:11:54.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>在 github 上我放了一个 <a href="https://github.com/ranklau/repos/tree/master/labs/swfupload2.5-fixed" target="_blank"> 修改版 </a> ，有兴趣的同学可以测试下性能。<br>需要注意的是，要在支持 PHP 的 Webserver 下运行。</p>
<h2 id="-">再遇问题</h2>
<p>经过上一轮的 SWFUpload 修改两周后有人反馈：</p>
<ul>
<li>上传速度非常慢，上传 8 张图片，有时甚至 8 分钟都没上传完；</li>
<li>其次是上传图片数量到某个阈值就无法上传；</li>
</ul>
<p>Debug 了一个下午，发现：</p>
<ul>
<li>问题 1 上传速度慢的问题，只存在 IE 里。<ul>
<li>我也觉得很奇怪，为什么 Flash 的性能还和浏览器有差别</li>
</ul>
</li>
<li>问题 2 不是 Flash 的问题，与脚本使用有关<ul>
<li>经查问题发现 Flash 用 css 隐藏之后，在 IE 下压缩和上传都无法 work （这比较好查）；</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="-">改造以及测试</h2>
<p>随之，经过一系列的调试和全系列机器环境测试：</p>
<ul>
<li>测试环境在 Flash Player 版本都是 11+；</li>
<li>在 Mac 下的最新版 Safari, Chrome, Firefox 和 win xp ， Win 7 下的 IE 6, 7, 8 ；</li>
<li>测试图片由 5616  ×  3744 5M 及 3888  ×  2592px 的图组成；</li>
<li>由原图压缩成 1000*1000 的图；质量 90 。</li>
</ul>
<p>我用了多种异步 JPEGencode 的库，发现还是 alchemy 的效率比较好，所以只列它的数据：</p>
<ul>
<li>异步 library 在非 IE 下表现良好，但是在 IE 下性能极差。</li>
<li>IE 时间值大致分布在 4s~30s 之间<ul>
<li>均值 8s ～ 10s 左右，时间上随机性很大</li>
</ul>
</li>
<li>非 IE 下值相对很稳定，时间都在 3~5s 这个区间。</li>
<li>IE 与其他浏览器相比，性能有的时候甚至有差 10 倍！这不能忍啊。<ul>
<li>我猜测是 Flash Player 在 IE 下，不能获得较长的 CPU 时间片。（注：目测了 CPU 监控得出的结论）</li>
</ul>
</li>
</ul>
<p>既然异步压缩没有办法允分利用 CPU ，那我试着改用同步压缩，而不用异步。<br>惊喜的发现效果比预期要好得多（如果用 swc 会更佳）。</p>
<ul>
<li>用同步的压缩有可以去大牛 <a href="http://www.bytearray.org/?p=775" target="_blank">bytearray</a> 下载优化后的 <a href="http://www.bytearray.org/wp-content/projects/fastjpeg/JPEGEncoder.as" target="_blank">JPEGEncoder.as</a> 。  </li>
<li>我这里用的是同事推荐的 <a href="http://www.blooddy.by/en/crypto/" target="_blank">blooddy_crypto.swc</a> 组件。</li>
</ul>
<h2 id="-">测试结果</h2>
<ul>
<li>IE 时间值大致分布在 1~8s 之间<ul>
<li>均值 4s 左右，时间上随机性很大， 1 次上传的图片越多，越趋向于均值）</li>
</ul>
</li>
<li>非 IE 下 值相对很稳定，时间都在 1s 左右，绝在多数用时不超过 1s 。</li>
<li>没有出现假死现象。用 i4 CPU 测试， cpu 使用最高才 13%。</li>
</ul>
<p>比预期还好，完爆异步压缩。</p>
<p>从 CPU 监控可以看到控制都较为良好（都没到 50%）；<br>IE 下的 Flash Player 的性能短期压缩时间很随机，长期看性能平均下来比非 IE 要慢不少。<br>曲线是由快而慢，然后慢慢是趋向均值（就象是电脑越用越慢一样）。</p>
<h2 id="-">教训</h2>
<p>这给我的教训是为什么不及早使用同步压缩？<br>是一直以来的观念束缚了我，认为「同步」一定会假死。</p>
<p>从我们这次的使用结果来看则不然。所以还是那句话：</p>
<blockquote>
<p>实践是检验真理的唯一标准。</p>
</blockquote>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<p>在 github 上我放了一个 <a href="https://github.com/ranklau/repos/tree/master/labs/swfupload2.5-fixed" target="_blank"> 修改版 </a> ，有兴趣的同学可以测试下性能。<br>需要注意的是，要在支持 PHP 的 Webserver 下运行。</p>
<h2 id="-">再遇问题</h2>
<p>经过上一轮的 SWFUpload 修改两周后有人反馈：</p>
<ul>
<li>上传速度非常慢，上传 8 张图片，有时甚至 8 分钟都没上传完；</li>
<li>其次是上传图片数量到某个阈值就无法上传；</li>
</ul>
<p>Debug 了一个下午，发现：</p>
<ul>
<li>问题 1 上传速度慢的问题，只存在 IE 里。<ul>
<li>我也觉得很奇怪，为什么 Flash 的性能还和浏览器有差别</li>
</ul>
</li>
<li>问题 2 不是 Flash 的问题，与脚本使用有关<ul>
<li>经查问题发现 Flash 用 css 隐藏之后，在 IE 下压缩和上传都无法 work （这比较好查）；</li>
</ul>
</li>
</ul>
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SWFUpload 2.5 bug 修改 (1)]]></title>
    <link href="http://rank.im/2012/08/18/fix-swfupload2.5-1/"/>
    <id>http://rank.im/2012/08/18/fix-swfupload2.5-1/</id>
    <published>2012-08-18T07:08:51.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-swfupload">关于 SWFUpload</h2>
<blockquote>
<p>SWFUpload 是一个客户端文件上传工具，最初由 Vinterwebb.se 开发，它通过整合 Flash 与 JavaScript 技术为 WEB 开发者提供了一个具有丰富功能继而超越传统标签的文件上传模式。</p>
</blockquote>
<p>主要特点：</p>
<ul>
<li>可以同时上传多个文件；</li>
<li>类似 AJAX 的无刷新上传；</li>
<li>可以显示上传进度；</li>
<li>良好的浏览器兼容性；</li>
<li>兼容其他 JavaScript 库 ( 例如： jQuery, Prototype 等 ) ；</li>
<li>支持 Flash 8 和 Flash 9 ；</li>
</ul>
<blockquote>
<p>SWFUpload 不同于其他基于 Flash 构建的上传工具，它有着优雅的代码设计，开发者可以利用 XHTML 、 CSS 和 JavaScript 来随心所欲的定制它在浏览器下的外观；它还提供了一组简明的 JavaScript 事件，借助它们开发者可以方便的在文件上传过程中更新页面内容来营造各种动态效果。</p>
</blockquote>
<p>这么多说的就是一个意思， SWFUpload 使用灵活方便，不少人在用。<br>但是，它在我们项目实际应用中发现问题。
<a id="more"></a></p>
<h2 id="-swfupload-2-5-">目前 SWFUpload 2.5 存在问题</h2>
<p>目前 swfupload 2.5 存在的 bug 及修改方法：</p>
<ul>
<li>在目前 v2.5 的代码里 bitmapData 不能用于 「 applyFilter 」 函数，那段代码需要去除（注释也可）或修改。对程序无明显影响。</li>
<li>使用 jpegencoder.swc 的 init() 方法有内存 free up 问题，可以改成单例模式「 singleton 」 调用组件 jpegencoder.swc 。</li>
</ul>
<p>如果有需要使用 SWFUploader ，可到我的 github 上下载 fix 后的代码。完全向前兼容。<br>在这篇文章中主要讲述 debug 过程。</p>
<h2 id="-">线上问题反馈</h2>
<p>从用户反馈过来，上传图片速度过慢。-- 用户界面 loading 的菊花图转比较久。</p>
<h2 id="-">定位问题</h2>
<p>单从描述来看太过笼统，需要先具体定位到哪个环节出了问题。</p>
<ul>
<li>我在本机上测试上传，感觉速度很快（图片大小平均大概 1M ， width 最大为 800 像素），几乎秒传。  </li>
<li>后来发起群众后发现在另一同事机器上传图片也很慢。</li>
</ul>
<p>我们先将「上传整体流程」分析，大致可分为以下几个部分:</p>
<ul>
<li>选择图片然后图片压缩</li>
<li>通过网络上传</li>
<li>修剪图象及入库</li>
<li>主库与从库进行同步</li>
</ul>
<p>从反馈问题来看，有可能出现的地方是在 压缩、网络 IO 上传、修剪图象及入库这 3 部分。<br>如何找到具体是哪一部分，首先看看我们执行图片 resize 上传的阈值是多少。</p>
<p>对应的 查看了一下 PublishUploader.js ，发现有这样的代码。</p>
<figure class="highlight as"><pre><span class="keyword">this</span>.startResizedUpload(<span class="keyword">null</span>,<span class="number">800</span>,<span class="number">800</span>,SWFUpload.RESIZE_ENCODING.JPEG,<span class="number">80</span>,<span class="keyword">false</span>);
</pre></figure>


<p>从代码作用是将所有图片最大尺寸 resize 为 800*800 象素。用 jpeg 图像压缩算法，并且图片质量是 80 。</p>
<p>于是，我进行以下操作：</p>
<ul>
<li>上传一张小于 800px 的图与一张大于 800px 的图，这两张图的总像素近似进行比较</li>
<li>分别在几台笔记本上试试</li>
</ul>
<p>经过实际测试，在「公司级网络」传输速度下，小于 800px 的图从上传到服务器返回在 1s 左右。<br>而 大于 800px 的图约 6s+ 才能执行完整个上传流程。</p>
<p>diff 这两个过程中，结论比较明显：</p>
<ul>
<li>图片 resize 压缩占的时间花了上传时间的 5 倍 -- 5s 。</li>
<li>后后经测试，发现在 3000px 的图上传压缩的时间占了 10s 左右。</li>
</ul>
<h2 id="-swfupload">修改 SWFUpload</h2>
<p>扫过 SWFUpload 代码，了解它的上传原理流程：</p>
<ul>
<li>FileReference 获取路径和图片内容</li>
<li>loader 载入图片</li>
<li>判断宽和高进行 resize 和压缩编码</li>
<li>进行 HTTP POST</li>
<li>服务器返回进行 JS 回调</li>
</ul>
<p>所以，在 Flash 里用 FileReference 是无法获取图片的宽高，如果如要得到图片的宽度和高度，需要创建一个 loader 把图片传入，通过 loader 的「 complete 」异步事件得到图片的高宽。</p>
<p>所以，查看 ImageResizer.as ，看到 loader_Complete 的事件处理函数：</p>
<figure class="highlight as"><pre> <span class="keyword">if</span> (<span class="keyword">this</span>.newWidth &lt; bmp.width || <span class="keyword">this</span>.newHeight &lt; bmp.height) {
   <span class="comment">// Apply the blur filter that helps clean up the resized image result</span>
   <span class="keyword">var</span> blurMultiplier:<span class="built_in">Number</span> = <span class="number">1.15</span>; <span class="comment">// 1.25;</span>
   <span class="keyword">var</span> blurXValue:<span class="built_in">Number</span> = <span class="built_in">Math</span>.max(<span class="number">1</span>, bmp.width / <span class="keyword">this</span>.newWidth) * blurMultiplier;
   <span class="keyword">var</span> blurYValue:<span class="built_in">Number</span> = <span class="built_in">Math</span>.max(<span class="number">1</span>, bmp.height / <span class="keyword">this</span>.newHeight) * blurMultiplier;
   <span class="keyword">var</span> blurFilter:BlurFilter = <span class="keyword">new</span> BlurFilter(blurXValue, blurYValue, int(BitmapFilterQuality.LOW));
   bmp.applyFilter(bmp, <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, bmp.width, bmp.height), <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>), blurFilter);
 }
</pre></figure>


<p>这一段大概意思是，如果有把大图片 resize 成小图片，就会给图片加模糊滤镜，以防止出现马赛克。<br>先将以上代码注释掉，化简我们的逻辑。</p>
<p>然后再看还有另一段代码：</p>
<figure class="highlight as"><pre> <span class="reserved">var</span> <span class="attribute">_bytes</span>:ByteArray = resizedBmp.getPixels(resizedBmp.rect);
 _bytes.compress();
 <span class="reserved">var</span> <span class="attribute">jpegEncoder</span>:AsyncJPEGEncoder = <span class="keyword">new</span> AsyncJPEGEncoder(<span class="keyword">this</span>.quality, <span class="number">0</span>, <span class="number">100</span>);
 jpegEncoder.addEventListener(EncodeCompleteEvent.COMPLETE, <span class="keyword">this</span>.EncodeCompleteHandler);
 jpegEncoder.addEventListener(ErrorEvent.ERROR, <span class="keyword">this</span>.EncodeErrorHandler);
 jpegEncoder.encode(resizedBmp);
 
 /*
 <span class="keyword">this</span>.ba = resizedBmp.getPixels(resizedBmp.rect);
 <span class="keyword">this</span>.ba.position = <span class="number">0</span>;
 <span class="keyword">this</span>.baOut = <span class="keyword">new</span> ByteArray();
 
 <span class="reserved">var</span> <span class="attribute">cLibEncoder</span>:Object = (<span class="keyword">new</span> CLibInit).init();
 <span class="keyword">this</span>.debug(resizedBmp.width.toString());
 <span class="keyword">this</span>.debug(resizedBmp.height.toString());
 cLibEncoder.encodeAsync(compressFinished, <span class="keyword">this</span>.ba, <span class="keyword">this</span>.bagOut, resizedBmp.width, resizedBmp.height, <span class="keyword">this</span>.quality);
 */
</pre></figure>


<p>未注释的代码是用一个开源异步 JPEG 编码类（ <a href="http://code.google.com/p/sync-to-async/source/browse/#svn%2Ftrunk%2Facr%2Fcodec" target="_blank">AsyncJPEGEncoder</a> ）用于编码图片。</p>
<p>为什么它没有用内置的 JPEG 图片 lib 「 JEPGEncoder 」进行编码？是因为开源的 AsyncJPEGEncoder 是异步的，且它在效率上对比 Adobe 内置的要稍高一些。</p>
<p>注释的代码是用 <a href="http://labs.adobe.com/wiki/index.php?title=Alchemy:Documentation:Developing_with_Alchemy:AS3_API&amp;redirect=no
http://www.websector.de/blog/2009/06/21/speed-up-jpeg-encoding-using-alchemy/">Adobe alchemy</a> 技术实现的一个 clib 组件，这个组件在代码目录下可以看到是 jpegencoder.swc 。</p>
<p>这个技术简单的说就是，它是把 c 的 libjpeg 编进 flash 里，并且可以高效执行 swc ，看网上的一些测试数据，确实比较高效。</p>
<p>看到这里或许我们该高兴了，如果将现在异步的 AsyncJPEGEncoder 类改成 jpegencoder.swc ，那问题不就解决了吗？</p>
<h2 id="-bitmapdata">神奇的 BitmapData</h2>
<p>我带着上面的想法试了一下，果然有效！<br>但不久就发现一个问题，有的图片上传成功，有的图片在 resize 的时候抛出异常「#2015 」。  </p>
<p>google 了一下这个错误号，发现是 flash Player 10 的一个 <a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/display/BitmapData.html" target="_blank"> 限制 </a> ：</p>
<blockquote>
<p>In AIR 1.5 and Flash Player 10, the maximum size for a BitmapData object is 8,191 pixels in width or height, and the total number of pixels cannot exceed 16,777,215 pixels. (So, if a BitmapData object is 8,191 pixels wide, it can only be 2,048 pixels high.) In Flash Player 9 and earlier and AIR 1.1 and earlier, the limitation is 2,880 pixels in height and 2,880 in width.</p>
<p>Starting with AIR 3 and Flash player 11, the size limits for a BitmapData object have been removed. The maximum size of a bitmap is now dependent on the operating system.</p>
</blockquote>
<p>现在市面上比较好的全画幅相机，就会超过这个像素限制。<br>例如测试的一张样图 5616 × 3744=21026304 像素。<br>而我们目前的 SWFUploader 2.5 的编译是基于 flash player 10 。<br>所以，异常自然就抛出了。</p>
<p>但是</p>
<ul>
<li>为什么线上正在运行的 SWFUploader 没有这个异常问题？</li>
<li>不是超过 1600w 像素的限制了吗，为什么还能正常上传还没有报错呢？</li>
</ul>
<p>原来，是 bitmapdata 文档有一个 loader 无 1600w 像素限制的细节没有说。<br>先比较以下两段使用 bitmapdata 代码：</p>
<p>代码 A ：</p>
<figure class="highlight as"><pre><span class="keyword">var</span> bmp:BitmapData = (li.content <span class="keyword">as</span> Bitmap).bitmapData; 
<span class="comment">//载入图片并放入到 bitmapData 里</span>
</pre></figure>


<p>代码 B ：</p>
<figure class="highlight as"><pre>	 
bmp.applyFilter(bmp, <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, bmp.width, bmp.height), <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>), blurFilter); 
<span class="comment">//应用 bitmapData 的 filter</span>
</pre></figure>


<p>两者在使用上有何不同?   </p>
<ul>
<li>「代码 A 」是将图片 load 到 bitmtpData 里，它不会报错。</li>
<li>「代码 B 」调用方法 applyFilter 创建出来的 Bitmap ，这样就会报错。</li>
</ul>
<p>applyFilter 从文档里的一段描述可以看出此方法是创建了一个新的 bitmapData 对象：</p>
<blockquote>
<p>applyFilter  ()  method</p>
<p>public function applyFilter(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, filter:BitmapFilter):void</p>
<p>Takes a source image and a filter object and generates the filtered image.</p>
</blockquote>
<p>以上代码差别 AS 3 文档没有说明用 loader 载入图片没有像素限制的问题。<br>线上代码因之前是其他同学修改过部分代码，无意用成了「代码 A 」 loader 方式载入。<br>因此并没有报错。</p>
<p>所以，此问题的解决方法为将使用 filter 的条件由</p>
<figure class="highlight as"><pre>	 
if (this<span class="preprocessor">.newWidth</span> &lt; bmp<span class="preprocessor">.width</span> || this<span class="preprocessor">.newHeight</span> &lt; bmp<span class="preprocessor">.height</span>) { 
//bmp<span class="preprocessor">.applyFilter</span> 
} 
</pre></figure>


<p>改为</p>
<figure class="highlight as"><pre>	 	
<span class="comment">//（ 0x01000000 等于 10 进制数 16777216 ）</span>
<span class="keyword">if</span> (bmp.width * bmp.height &lt; <span class="number">0x01000000</span>) { 
<span class="comment">//bmp.applyFilter </span>
} 
</pre></figure>


<p>像素问题 Bitmap 问题终于解决。</p>
<h3 id="-alchemy">神奇的炼金术 alchemy</h3>
<p>解决完上面的问题，再测试，又发现了一个问题。</p>
<ul>
<li>用 JS 创建 SWFUploader 上传图片第一次成功；</li>
<li>再用这个 flash 实例传一张图就可耻的失败了，而且还不抛异常。</li>
</ul>
<p>好吧，不抛异常，就只能加入调试埋 log 了，将几个代码关键函数加入对应的 log ：</p>
<ul>
<li>加入压缩进度 log 。因为不管用何种 JPEG 组件，都是异步成生成 JPEG 图片。</li>
<li>在重点逻辑的入口点与出口点加入相应 log ，<ul>
<li>加入到 load 图片成功；</li>
<li>开始进入压缩函数块；</li>
<li>压缩图片的宽高；</li>
<li>调用 alchemy 结束；</li>
<li>异步压缩结束。</li>
</ul>
</li>
</ul>
<p>再加入一个 log 函数：</p>
<figure class="highlight as"><pre>	  
<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">debug</span><span class="params">(msg:String)</span><span class="type">:void</span> {</span>    
  ExternalCall.Debug(<span class="string">'console.log'</span>,msg);  
}
</pre></figure>


<p>这样，就可以在控制台里看到 log 了。
发现规律</p>
<ul>
<li>第 1 次 resize 图正常</li>
<li>第 2 次除了压缩进度的有 log ，其他进展一直都是 0%。</li>
</ul>
<p>再次 review JPEG 编码的代码块:</p>
<figure class="highlight as"><pre>	 
var cLibEncoder:Object = (new CLibInit)<span class="preprocessor">.init</span>()<span class="comment">;</span>
this<span class="preprocessor">.debug</span>(resizedBmp<span class="preprocessor">.width</span><span class="preprocessor">.toString</span>())<span class="comment">;</span>
this<span class="preprocessor">.debug</span>(resizedBmp<span class="preprocessor">.height</span><span class="preprocessor">.toString</span>())<span class="comment">;</span>
cLibEncoder<span class="preprocessor">.encodeAsync</span>(compressFinished, this<span class="preprocessor">.ba</span>, this<span class="preprocessor">.bagOut</span>, resizedBmp<span class="preprocessor">.width</span>, resizedBmp<span class="preprocessor">.height</span>, this<span class="preprocessor">.quality</span>)<span class="comment">;</span>
</pre></figure>


<p>分析个组件的使用，第一感觉就是组件使用过后居然没有销毁，这代码太囧了 =.=</p>
<p>alchemy 如果为了高效，应该是</p>
<ul>
<li>将 lib 驻入内存再开辟一块 buffer 给它</li>
<li>Resize 大图时，如果 buffer 处理不好，没有很好的 free up ，第二次 init 会不会有问题？</li>
<li>如果开辟的内存小的话是不是更安全？</li>
</ul>
<p>按照上面的这个思路，我将 resize 的参数改小，使 buffer 使用尽可能的小：</p>
<ul>
<li>将 resize 参数改为所有上传图都 resize 到 100*100, quiality 为 80 。</li>
</ul>
<p>测试了一下发现都能正常上传多张图片。</p>
<p>那再按照第一次可上传后续不能传和 buffer 小可用的结论，我将使用 alchemy 组件初始化的使用改用为 static （即 singlton 类型）保证只实例化一次，看是否正常。</p>
<p>最后发现可正常 resize 多张图片，到此 alchemy 的问题也得已解决。</p>
<h2 id="-">后记</h2>
<p>这篇文章来源于我把 SWFUpload 的问题解决思路用邮件分享给大家。<br>如何改的，可以看我附件里的代码。<br>重要的不是代码怎么 fix 的，而是思路。  </p>
<p>因为我觉得前端同学看上去都是只关注兼容性而不关注逻辑思维。这篇文章是算是抛砖引玉了。<br>对于我们使用的第三方代码，有空可以多熟悉，关键时刻也许不用手忙脚乱。</p>
<p>其他的 flash 第三方上传解决方案：</p>
<ul>
<li><a href="http://www.plupload.com/example_all_runtimes.php" target="_blank">plupload</a> - 特点是支持平台全（ flash, silverlight, html5, html4) 都支持。 flash 支持客户端压缩图片， flash 编译出来的大小只有 18K 。压缩效率比 swfupload 低不少。<ul>
<li>5616 × 3744(5.1M) 图片， resize 成（ 320*240 ，质量 90 ）</li>
<li>plupload 用时在 10s+，而 Swfupload 用时在 2s- ;</li>
<li>环境在 mac ML 系统 flash player 11 ， safari 6 &amp; chrome 22dev 。</li>
</ul>
</li>
<li><a href="http://www.uploadify.com/demos/" target="_blank">uploadify</a> <ul>
<li>平台支持全面， 与 plupload 类似</li>
<li>但是不支持 resize 图片，</li>
<li>在大图上传的时，网速慢时，上传整体时间就会比较久，全依赖于带宽。</li>
</ul>
</li>
</ul>
<p>虽然两年过去了， swfupload 的压缩性能还算是不错的（主要是依赖于 flash 平台的性能）。</p>
<h2 id="-">相关链接汇总</h2>
<ul>
<li><a href="http://code.google.com/p/swfupload/" target="_blank">swfupload</a></li>
<li><a href="http://code.google.com/p/sync-to-async/source/browse/#svn%2Ftrunk%2Facr%2Fcodec" target="_blank">AsyncJPEGEncoder</a></li>
<li><a href="http://www.bytearray.org/?p=775" target="_blank">JPEG encoder with alchemy</a> <a href="http://www.adobe.com/cn/devnet/author_bios/thibault_imbert.html" target="_blank"> 作者介绍 </a></li>
<li><a href="http://www.plupload.com/example_all_runtimes.php" target="_blank">plupload</a></li>
<li><a href="http://www.uploadify.com/demos/" target="_blank">uploadify</a> </li>
<li><a href="http://labs.adobe.com/wiki/index.php?title=Alchemy:Documentation:Developing_with_Alchemy:AS3_API&amp;redirect=no
http://www.websector.de/blog/2009/06/21/speed-up-jpeg-encoding-using-alchemy/">adobe alchemy</a></li>
<li><a href="http://wenku.baidu.com/view/42b5633e5727a5e9856a61ff.html" target="_blank">JPEG 图像格式详解 </a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-swfupload">关于 SWFUpload</h2>
<blockquote>
<p>SWFUpload 是一个客户端文件上传工具，最初由 Vinterwebb.se 开发，它通过整合 Flash 与 JavaScript 技术为 WEB 开发者提供了一个具有丰富功能继而超越传统标签的文件上传模式。</p>
</blockquote>
<p>主要特点：</p>
<ul>
<li>可以同时上传多个文件；</li>
<li>类似 AJAX 的无刷新上传；</li>
<li>可以显示上传进度；</li>
<li>良好的浏览器兼容性；</li>
<li>兼容其他 JavaScript 库 ( 例如： jQuery, Prototype 等 ) ；</li>
<li>支持 Flash 8 和 Flash 9 ；</li>
</ul>
<blockquote>
<p>SWFUpload 不同于其他基于 Flash 构建的上传工具，它有着优雅的代码设计，开发者可以利用 XHTML 、 CSS 和 JavaScript 来随心所欲的定制它在浏览器下的外观；它还提供了一组简明的 JavaScript 事件，借助它们开发者可以方便的在文件上传过程中更新页面内容来营造各种动态效果。</p>
</blockquote>
<p>这么多说的就是一个意思， SWFUpload 使用灵活方便，不少人在用。<br>但是，它在我们项目实际应用中发现问题。
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[山西的几张照片]]></title>
    <link href="http://rank.im/2012/06/26/tourism-in-shanxi/"/>
    <id>http://rank.im/2012/06/26/tourism-in-shanxi/</id>
    <published>2012-06-26T09:08:31.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>出门旅游在外， iPhone 4S 这样的设备拍照比较方便，可以不用拿沉重的单反了。
这次用 iPhone 拍的照片除了象素低点，广角和长焦都不够用以外，其他的还蛮好的。</p>
<p>大同或平遥都是有历史的城市，所以我把照片去色，用黑白体现历史感。</p>
<p><img src="/images/shanxi/IMG_0691.JPG" alt=""></p>
<a id="more"></a>

<p>这里是云岗石窟的一座建筑，整体的感觉很象北京故宫的角楼。</p>
<p><img src="/images/shanxi/IMG_0688.JPG" alt=""></p>
<p>石雕很有感觉，不足的是霓虹灯有点败景。</p>
<p><img src="/images/shanxi/IMG_0695.JPG" alt=""></p>
<p><img src="/images/shanxi/IMG_0698.JPG" alt=""></p>
<p>云岗石窟的石像大多数已经被风化，拍照一定不要开闪光。</p>
<p><img src="/images/shanxi/IMG_0699.JPG" alt=""></p>
<p>平遥古镇一瞥。</p>
<p><img src="/images/shanxi/IMG_0700.JPG" alt=""></p>
<p>云岗石窟的石像。</p>
<p><img src="/images/shanxi/IMG_0702.JPG" alt=""></p>
<p>很多石窟原本都有彩绘，由于时间久远现在大多数都没有色彩了，也许褪色的石像才能体现它们的历史</p>
<p><img src="/images/shanxi/IMG_0701.JPG" alt=""></p>
<p>一个古镇的历史，用城墙来说明最好不过了。</p>
<p><img src="/images/shanxi/IMG_0703.JPG" alt=""></p>
<p>传说中的乔家大院。</p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<p>出门旅游在外， iPhone 4S 这样的设备拍照比较方便，可以不用拿沉重的单反了。
这次用 iPhone 拍的照片除了象素低点，广角和长焦都不够用以外，其他的还蛮好的。</p>
<p>大同或平遥都是有历史的城市，所以我把照片去色，用黑白体现历史感。</p>
<p><img src="/images/shanxi/IMG_0691.JPG" alt=""></p>
]]></summary>
    
      <category term="life" scheme="http://rank.im/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webkit 里会出现突然闪一下的问题]]></title>
    <link href="http://rank.im/2012/01/05/webkit-css3-blink/"/>
    <id>http://rank.im/2012/01/05/webkit-css3-blink/</id>
    <published>2012-01-05T06:00:03.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">问题</h2>
<p>有用户反馈在 chrome 下出现屏幕会闪，但不是每次都能复现。  </p>
<h2 id="-">解决办法</h2>
<figure class="highlight css"><pre><span class="class">.no-flick</span><span class="rules">{<span class="rule"><span class="attribute">-webkit-backface-visibility</span>:<span class="value"> hidden</span></span>; <span class="comment">/*但不能用于 sprite 雪碧图*/</span><span class="rule">}</span></span>
<span class="comment">/* 或 */</span>
<span class="class">.no-flick</span><span class="rules">{<span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span></span>;<span class="rule">}</span></span>
</pre></figure>


<a id="more"></a>

<h2 id="-">过程</h2>
<p>昨天晚上 maomao ，晓刚我提起，会否是我们的「浮层」导致。逻辑是因为</p>
<ul>
<li>「浮层」 的 style 加了 opacity 。</li>
<li>页面还没 load 完毕就把 mask 给加到 body 第一个元素了，这时没有加 display:none 。</li>
</ul>
<p>而后我在「浮层」的蒙板 mask 把 background:white 改成 Red 。<br>很遗憾是没有出现红色。</p>
<p>所以，确定不是「浮层」的 mask 导致的问题。</p>
<p>在调试的时候感到幸运的是：<br>发现「闪」这个问题，都是闪在页面头部，经过精简后发现是在</p>
<pre><code>&lt;a&gt;&lt;i&gt;&lt;i&gt;&lt;/a&gt;
</code></pre><p>标签里。</p>
<p>晓亮提到会否是 Transform 引起的。<br>试后，去除 transform 果然管用。<br>但是我们仍然没有知道解决办法，以及为何这样。</p>
<p>在百度上搜索类似 css 3 transform bug ，无果。
别灰心，在 stackoverflow 上 看看。
query: &quot;transform flick bug webkit&quot;</p>
<p>果然有料。<br><a href="http://stackoverflow.com/questions/3461441/prevent-flicker-on-webkit-transition-of-webkit-transform" target="_blank">http://stackoverflow.com/questions/3461441/prevent-flicker-on-webkit-transition-of-webkit-transform</a></p>
<figure class="highlight css"><pre><span class="tag">-webkit-backface-visibility</span>: <span class="tag">hidden</span>; <span class="comment">/*但不能用于 sprite 雪碧图*/</span>
<span class="comment">/* 或 */</span>
<span class="tag">-webkit-transform</span><span class="pseudo">:translate3d(0</span>,0,0);
</pre></figure>

<p>来解决「闪」的问题。</p>
<p>如果用 translate3d 这么解决，心里想这不是用 3d 另一个问题解决现在 css3 3d 的一个问题吗。
顺着往下找了下资料。</p>
<p>果然如此， translate3d 有问题：</p>
<blockquote>
<p>However, the body {-webkit-transform} approach causes all elements on the page to effectively be rendered in 3D. This isn&#39;t the worst thing, but it slightly changes the rendering of text and other CSS-styled elements.</p>
<p>It may be an effect you want. It may be useful if you&#39;re doing a lot of transform on your page. Otherwise, -webkit-backface-visibility:hidden on the element your transforming is the least invasive option.</p>
</blockquote>
<p>所以，从目前来看 -webkit-backface-visibility: hidden; 是最优解。</p>
<h2 id="-">弄清源头</h2>
<p>关于这个 css3 属性拿来作什么用的。可以查阅<br>w3c 资料
<a href="http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property" target="_blank">http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</a></p>
<blockquote>
<p>The ‘ backface-visibility ’ property determines whether or not the &quot;back&quot; side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer. Applying a rotation about Y of 180 degrees (for instance) would cause the back side of the element to face the viewer.
This property is useful when you place two elements back-to-back, as you would to create a playing card. Without this property, the front and back elements could switch places at times during an animation to flip the card. Another example is creating a box out of 6 elements, but where you want to see the inside faces of the box. This is useful when creating the backdrop for a 3 dimensional stage.</p>
</blockquote>
<p>用这个属性做翻卡片的小游戏比较合适 :) 。<br>测试运行以下代码，就能理解为什么会在 transform 时会闪：</p>
<figure class="highlight html"><pre><span class="doctype">&lt;!DOCTYPE HTML&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css"> 
<span class="id">#div1</span> <span class="rules">{
<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">120</span>px</span></span>;
<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100</span>px</span></span>;
<span class="rule"><span class="attribute">background-color</span>:<span class="value">yellow</span></span>;
<span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1</span>px solid black</span></span>;
<span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotateY(<span class="number">25</span>deg)</span></span></span>; <span class="comment">/* Firefox */</span>
<span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotateY(<span class="number">25</span>deg)</span></span></span>; <span class="comment">/* Safari and Chrome */</span>
<span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotateY(<span class="number">25</span>deg)</span></span></span>;
<span class="rule">}</span></span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="function"><span class="keyword">function</span> <span class="title">rotate</span><span class="params">(value)</span> {</span>
  document.getElementById(<span class="string">'div1'</span>).style.webkitTransform = <span class="string">"rotateY("</span> + value + <span class="string">"deg)"</span>;
  document.getElementById(<span class="string">'div1'</span>).style.MozTransform = <span class="string">"rotateY("</span> + value + <span class="string">"deg)"</span>;
  document.getElementById(<span class="string">'div1'</span>).style.transform = <span class="string">"rotateY("</span> + value + <span class="string">"deg)"</span>;
  document.getElementById(<span class="string">'span1'</span>).innerHTML = value + <span class="string">"deg"</span>
}
<span class="function"><span class="keyword">function</span> <span class="title">checkBackface</span><span class="params">()</span> {</span>
  <span class="keyword">if</span> (document.getElementById(<span class="string">"bf"</span>).checked == <span class="literal">true</span>) {
    document.getElementById(<span class="string">'div1'</span>).style.webkitBackfaceVisibility = <span class="string">"hidden"</span>
  } <span class="keyword">else</span> {
    document.getElementById(<span class="string">'div1'</span>).style.webkitBackfaceVisibility = <span class="string">"visible"</span>
  }
}
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"div1"</span>&gt;</span>HELLO<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span>&gt;</span>Rotate the yellow div element, with and without checking the backface-visibility checkbox:<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span>&gt;</span>Hide the backside:<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">onchange</span>=<span class="value">"checkBackface()"</span> <span class="attribute">id</span>=<span class="value">"bf"</span> /&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
Rotate:<span class="tag">&lt;<span class="title">br</span> /&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"range"</span> <span class="attribute">min</span>=<span class="value">"-360"</span> <span class="attribute">max</span>=<span class="value">"360"</span> <span class="attribute">value</span>=<span class="value">"25"</span> <span class="attribute">onchange</span>=<span class="value">"rotate(this.value)"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
-webkit-transform: rotateY(<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"span1"</span>&gt;</span>7deg<span class="tag">&lt;/<span class="title">span</span>&gt;</span>);
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></figure>


<p>transform 是 3D 变换，而 backface-visibility:hidden ，则是在背面隐藏，实际上就变成了 2D 。<br>而把 translate3d 变换关闭也可以，但性能不好。</p>
<h2 id="-">结论</h2>
<p>在用 </p>
<ul>
<li>position:absulote+zindex!=0 </li>
<li>用 transform 会偶尔出现页面会闪的现象</li>
</ul>
<p>确实是 chrome 的一个 bug 。<br>chromium 里没有发现有人提 bug ，所以我检索了一下 webkit.org 的 bugtrace ，看到</p>
<ul>
<li><a href="https://bugs.webkit.org/show_bug.cgi?id=47175" target="_blank">https://bugs.webkit.org/show_bug.cgi?id=47175</a></li>
<li><a href="https://bug-47175-attachments.webkit.org/attachment.cgi?id=69779" target="_blank">https://bug-47175-attachments.webkit.org/attachment.cgi?id=69779</a></li>
</ul>
<p>无疑，这个问题后续 webkit 一定会 fix 。<br>另，-webkit-backface-visibility: hidden; 是最优解。</p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">问题</h2>
<p>有用户反馈在 chrome 下出现屏幕会闪，但不是每次都能复现。  </p>
<h2 id="-">解决办法</h2>
<figure class="highlight css"><pre><span class="class">.no-flick</span><span class="rules">{<span class="rule"><span class="attribute">-webkit-backface-visibility</span>:<span class="value"> hidden</span></span>; <span class="comment">/*但不能用于 sprite 雪碧图*/</span><span class="rule">}</span></span>
<span class="comment">/* 或 */</span>
<span class="class">.no-flick</span><span class="rules">{<span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span></span>;<span class="rule">}</span></span>
</pre></figure>


]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[呼伦贝尔游的几张照片]]></title>
    <link href="http://rank.im/2011/08/08/tourism-in-hunlunbeier/"/>
    <id>http://rank.im/2011/08/08/tourism-in-hunlunbeier/</id>
    <published>2011-08-08T04:05:22.000Z</published>
    <updated>2014-03-16T14:07:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/hunlunbeier/6016693788_149811e489_z.jpg" alt="">
<a id="more"></a>
<img src="/images/hunlunbeier/6016136621_80fa51b162_z.jpg" alt="">
<img src="/images/hunlunbeier/6016137457_48d4f44b93_z.jpg" alt="">
<img src="/images/hunlunbeier/6016143997_2c676523e3_z.jpg" alt="">
<img src="/images/hunlunbeier/6016159861_4affbf7408_z.jpg" alt="">
<img src="/images/hunlunbeier/6016254241_fb69d4bb7b_z.jpg" alt="">
<img src="/images/hunlunbeier/6016781576_e0fa3441d3_z.jpg" alt="">
<img src="/images/hunlunbeier/6016780322_75bc0477ec_z.jpg" alt="">
<img src="/images/hunlunbeier/6016157935_779e9d9f34_z.jpg" alt="">
<img src="/images/hunlunbeier/6016710608_b83334bbb8_z.jpg" alt="">
<img src="/images/hunlunbeier/6016706512_d246f9434f_z.jpg" alt="">
<img src="/images/hunlunbeier/6016700104_33e9bf8f07_z.jpg" alt="">
<img src="/images/hunlunbeier/6016701922_f91ec3c378_z.jpg" alt="">
<img src="/images/hunlunbeier/6016151539_773f5ebc2d_z.jpg" alt="">
<img src="/images/hunlunbeier/6016703430_e6c2cbcbb7_z.jpg" alt="">
<img src="/images/hunlunbeier/6016698086_0251a6a9db_z.jpg" alt="">
<img src="/images/hunlunbeier/6016696994_d86533a1b8_z.jpg" alt="">
<img src="/images/hunlunbeier/6016143377_2f6331d3ba_z.jpg" alt="">
<img src="/images/hunlunbeier/6016141623_eb1dc9f418_z.jpg" alt="">
<img src="/images/hunlunbeier/6016142819_39d2347f5f_z.jpg" alt="">
<img src="/images/hunlunbeier/6016145973_984cbc3eea_z.jpg" alt="">
<img src="/images/hunlunbeier/6016138203_38eeeaefe6_z.jpg" alt="">
<img src="/images/hunlunbeier/6016139009_c68fa86fed_z.jpg" alt="">
<img src="/images/hunlunbeier/6016692290_c27e600c75_z.jpg" alt="">
<img src="/images/hunlunbeier/6016687668_86db875efe_z.jpg" alt="">
<img src="/images/hunlunbeier/6016135033_211a847822_z.jpg" alt=""></p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<p><img src="/images/hunlunbeier/6016693788_149811e489_z.jpg" alt="">
]]></summary>
    
      <category term="life" scheme="http://rank.im/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用户行为系统 如何记录行为数据]]></title>
    <link href="http://rank.im/2011/04/07/user-behavior-record-data/"/>
    <id>http://rank.im/2011/04/07/user-behavior-record-data/</id>
    <published>2011-04-07T15:45:43.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>最近准备把我主持并负责的前端用户行为系统开源了，这个系统我们内部命名为 marmot 。中文为「土拨鼠」，有挖掘之意。
除我之外，还有两位开发人员分别是： seven 和 cyhello 。</p>
<p>本篇文章简短的说明一下 marmot 的 log 重点问题：</p>
<ol>
<li>解决不同分辩率的策略.</li>
<li>解决粒度过细的问题.</li>
<li>还原路径问题.</li>
<li>何时发回数据及数据量的问题</li>
</ol>
<a id="more"></a>

<h2 id="-">分辩率策略</h2>
<p>默认原点以 p(0,0) 开始计算,如果是定宽页面,p(0,0) 坐标在不同辩率下得到的坐标是不同的.如何解决这一问题.
普遍情况下会采取截面坐标. 分析目前页面几种类型：</p>
<ul>
<li>页面居左布局原点坐标从 p(0,0) 开始计算。</li>
<li>页面居中布局原点坐标从 p(document.documentElement.scrollWidth/2|0,0) 开始计算。</li>
<li>百分比的宽其实也是可以定位的，原理也是引入相对坐标系，但也有一些劣势，这里不展开了。</li>
</ul>
<h2 id="-">页面像素粒度切分</h2>
<p>每个页面默认粒度为 pixel(1,1) ，即 1 像素为单位。 这样的优点是数据不失真，但缺点则是数据量传输和存储量大。</p>
<p>大多数时候我们是不需要按 pixel(1,1) 来计算的。而解决这一问题的思路很简单：</p>
<ul>
<li>页面做先 grid 化, pixel(n,n) 。</li>
<li>数量为: Math.floor(document.documentElement.scrollWidth/n) 。「 n 为象素比例尺」</li>
</ul>
<h2 id="-">还原路径</h2>
<ul>
<li>可以序列化 DOM path 成 selector 。</li>
<li>以 previousSibling + ancestor 不断向上递归出 presudo selector( 伪 selector) 。</li>
</ul>
<h2 id="-">何时发回及发回数据量</h2>
<p>beforeunload 异步发回。
数据量不会太大, HTTP 里 GET 方式请求我们所知：</p>
<ul>
<li>IE6 2K 数据 ( 已知 ) 。</li>
<li>IE7+5K 左右 ( 记得之前我测过，印象中是这个数据 ) ，非 IE 都有 &gt;= 2K 的数据量。</li>
</ul>
<p>肯定有人问发回的比例是多少，据 dron 同学统计过约 80%左右。<br>虽说不是绝对发回来，但足够你用。<br>采样率 5K~1W 左右 pv 的操作发回，数据最大为 2K*1W 约 20~30M log 不算多。</p>
]]></content>
    <summary type="html"><![CDATA[<p>最近准备把我主持并负责的前端用户行为系统开源了，这个系统我们内部命名为 marmot 。中文为「土拨鼠」，有挖掘之意。
除我之外，还有两位开发人员分别是： seven 和 cyhello 。</p>
<p>本篇文章简短的说明一下 marmot 的 log 重点问题：</p>
<ol>
<li>解决不同分辩率的策略.</li>
<li>解决粒度过细的问题.</li>
<li>还原路径问题.</li>
<li>何时发回数据及数据量的问题</li>
</ol>
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[九寨沟拍的几张图]]></title>
    <link href="http://rank.im/2010/11/05/tourism-in-jiuzhaigou/"/>
    <id>http://rank.im/2010/11/05/tourism-in-jiuzhaigou/</id>
    <published>2010-11-05T03:59:38.000Z</published>
    <updated>2014-03-16T14:02:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/jiuzhaigou/2bdc2fc4c22d75e38326ac1d.jpg" width="700"><br/><br/>
<a id="more"></a>
<img src="/images/jiuzhaigou/88fd974320a6845b9213c601.jpg" width="700"><br/><br/></p>
<p><img src="/images/jiuzhaigou/8310696e929f679080cb4a0f.jpg" width="350">
<img src="/images/jiuzhaigou/97e186a7b83efedfd0435879.jpg" width="350"><br/><br/></p>
<p><img src="/images/jiuzhaigou/9bfe9fb506d9238437d3ca20.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/31b2fd123265861bf919b8eb.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/190efddbe58d642cd1164ee4.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/3829ccfaf84910dd58ee90e1.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/503907ce80eaca4993457e43.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/e0353336df424f7b0b55a9f6.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/992cfd01d23d80447aec2c77.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/33a1c74f14f5cf7caec3ab72.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/547aa881a10e2192bd3e1e70.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/fdfdc8d770d7a097a344df61.jpg" width="700"><br/><br/>
<img src="/images/jiuzhaigou/4f0fbfcbb1c5c455bf09e6f0.jpg" width="700"><br/><br/></p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<p><img src="/images/jiuzhaigou/2bdc2fc4c22d75e38326ac1d.jpg" width="700"><br/><br/>
]]></summary>
    
      <category term="life" scheme="http://rank.im/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[模拟里 firebug 的 DOM inspect 功能]]></title>
    <link href="http://rank.im/2010/08/29/simulate-dom-inspect-effect/"/>
    <id>http://rank.im/2010/08/29/simulate-dom-inspect-effect/</id>
    <published>2010-08-29T06:09:15.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">常规思路</h2>
<p>在 firefox 里如何实现 firebug 的 DOM inspect 选择功能?</p>
<ul>
<li>首先，我们会 document 里添加 mouseover 事件时在 HTMLElement 上飘一个 absolute 的容器，设置 border 。</li>
<li>接着， mousedown ，这个 absolute 的元素隐藏；</li>
<li>再着着， click 结束后从事件里的 event 得到 target ，从而再得到 inspect 。</li>
</ul>
<p>可这样是不是真的能做到呢？
<a id="more"></a>
忽视了一点。<br>mouseover 如果在某个元素上飘一个 absolute 容器，那么你的 over 事件永远在这个 absolute 元素上了。</p>
<p>可惜不是 as ， as 可以把某个容器的事件 enable 设为 false 即可。<br>DOM w3c 没有禁用事件的功能。</p>
<h2 id="-">打破常规</h2>
<p>回到题目，那怎么做呢？<br>同事能跳出刚才的程序思维——用 4 个 div 当 4 条边就可以了。</p>
<p>不知道你第还没试之前的分析是否是这样的呢？
我当时在想，在 coding 的时候能跳出原来传统的思维真是不易。太赞了!</p>
<p>写个简单 demo 记念（用 firefox 看吧。 )
八卦一下，据观察， firebug 确实真的也是这么做的（没看代码，只看了 DOM tree 里多了几个 div ）。</p>
<figure class="highlight html"><pre><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" 
"http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">title</span>&gt;</span>rank's HTML Document<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">body</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://code.jquery.com/jquery-1.4.2.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">
<span class="class">.abs</span> <span class="rules">{<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;<span class="rule"><span class="attribute">zoom</span>:<span class="value"><span class="number">1</span></span></span></span>}
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#ffc;height:20px;margin:20px 0;padding:20px;"</span>&gt;</span>rank<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"abs-right"</span> <span class="attribute">class</span>=<span class="value">"abs"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"abs-left"</span> <span class="attribute">class</span>=<span class="value">"abs"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"abs-bottom"</span> <span class="attribute">class</span>=<span class="value">"abs"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"abs-top"</span> <span class="attribute">class</span>=<span class="value">"abs"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"><span class="comment">//&lt;![CDATA[</span>
$(document).mouseover(<span class="function"><span class="keyword">function</span><span class="params">(e)</span> {</span>
  <span class="keyword">var</span> target = e.target;
  <span class="keyword">var</span> width = target.offsetWidth;
  <span class="keyword">var</span> height = target.offsetHeight;
  <span class="keyword">var</span> pos = $(target).offset();

  $(<span class="string">'#abs-top'</span>).css({<span class="string">"background"</span>:<span class="string">"blue"</span>,<span class="string">"left"</span>:pos.left,<span class="string">"top"</span>:pos.top,<span class="string">"width"</span>:width,<span class="string">"height"</span>:<span class="number">1</span>});
  $(<span class="string">'#abs-bottom'</span>).css({<span class="string">"background"</span>:<span class="string">"blue"</span>,<span class="string">"left"</span>:pos.left,<span class="string">"top"</span>:pos.top+height,<span class="string">"width"</span>:width,<span class="string">"height"</span>:<span class="number">1</span>});
  $(<span class="string">'#abs-left'</span>).css({<span class="string">"background"</span>:<span class="string">"blue"</span>,<span class="string">"left"</span>:pos.left,<span class="string">"top"</span>:pos.top,<span class="string">"width"</span>:<span class="number">1</span>,<span class="string">"height"</span>:height});
  $(<span class="string">'#abs-right'</span>).css({<span class="string">"background"</span>:<span class="string">"blue"</span>,<span class="string">"left"</span>:pos.left+width,<span class="string">"top"</span>:pos.top,<span class="string">"width"</span>:<span class="number">1</span>,<span class="string">"height"</span>:height});
});
$(document).click(<span class="function"><span class="keyword">function</span><span class="params">(e)</span> {</span>
  alert($(e.target).html());
});
<span class="comment">//]]&gt;</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></figure>


<h2 id="-">穿透事件</h2>
<p>不能像 AS 一样禁止事件，但是非 IE 下可穿透事件。<br>非 IE 下可以通过
 <a href="https://developer.mozilla.org/en/CSS/pointer-events" target="_blank">pointer-events:none</a> 来透过事件，这里有个 <a href="http://www.qgy18.com/file/code/firebug_demo.html" target="_blank">demo</a> 。</p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">常规思路</h2>
<p>在 firefox 里如何实现 firebug 的 DOM inspect 选择功能?</p>
<ul>
<li>首先，我们会 document 里添加 mouseover 事件时在 HTMLElement 上飘一个 absolute 的容器，设置 border 。</li>
<li>接着， mousedown ，这个 absolute 的元素隐藏；</li>
<li>再着着， click 结束后从事件里的 event 得到 target ，从而再得到 inspect 。</li>
</ul>
<p>可这样是不是真的能做到呢？
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IE6 SP1+SSL+AJAX(XMLHttpRequest)=trouble]]></title>
    <link href="http://rank.im/2008/12/21/ie6-ssl-ajax-trouble/"/>
    <id>http://rank.im/2008/12/21/ie6-ssl-ajax-trouble/</id>
    <published>2008-12-20T17:04:33.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">问题描述</h2>
<p>在 IE 6 SP1 访问 https 站点， AJAX 会随机出现一个 winet 的状态码： 12152 。<br><a href="http://www.baidu.com/s?tn=ichuner_4_pg&amp;ie=gb2312&amp;bs=xmlhttp+12152&amp;sr=&amp;z=&amp;cl=3&amp;f=8&amp;wd=ajax+12152&amp;ct=0" target="_blank"> 网上 </a> 有不少人遇到了这困惑的状态码。</p>
<p>说明</p>
<ul>
<li>Windows 下的 IE 里 new ActiveXObject(progId) 生成的 XMLHttpRequest 是 winet 的一部分。</li>
<li>IE 7 以下对 SSL ( 即 HTTPS) 的支持不够好。</li>
</ul>
<a id="more"></a>


<h2 id="-">解决方案</h2>
<p>考虑</p>
<ul>
<li>如上述的情况基数人群很少，那可考虑短时间内不解决此问题。</li>
<li>要解决而我们又不想彻底的抛弃 AJAX ，该怎么办。<ul>
<li>因为我们不仅仅只有 IE 6 ，还有 IE 7 和 IE 8 。</li>
<li>所以不能因为 IE 6 SP1 或某些奇怪版本的 IE 用户而摒弃 AJAX ）</li>
</ul>
</li>
</ul>
<p>要解决此问题，可以想</p>
<ul>
<li>把无刷新页面看做是一个与服务器沟通的桥梁的话，这座桥除了用 XMLHttpRequest 之外。</li>
<li>还可以用 iframe 。形成一个 connection 的 adapter 。</li>
</ul>
<p>除此之外可以将 AJAX 加一个比较快速的 「重试」（ retry ）方案：</p>
<figure class="highlight js"><pre>      <span class="keyword">switch</span>(<span class="keyword">this</span>.requestor.status)
      {
        <span class="keyword">case</span> <span class="number">12029</span>:
        <span class="keyword">case</span> <span class="number">12030</span>:
        <span class="keyword">case</span> <span class="number">12031</span>:
        <span class="keyword">case</span> <span class="number">12152</span>:
        <span class="keyword">case</span> <span class="number">12159</span>:
          <span class="comment">// fixed ie ssl bug, retry send data</span>
          <span class="keyword">var</span> loader = <span class="keyword">this</span>;
          setTimeout( <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> loader.execute.call(loader); }, <span class="number">10</span>);
          <span class="keyword">break</span>;
          
        <span class="keyword">default</span>:
          <span class="keyword">this</span>.onError(<span class="keyword">this</span>);
      }
</pre></figure>


<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">问题描述</h2>
<p>在 IE 6 SP1 访问 https 站点， AJAX 会随机出现一个 winet 的状态码： 12152 。<br><a href="http://www.baidu.com/s?tn=ichuner_4_pg&amp;ie=gb2312&amp;bs=xmlhttp+12152&amp;sr=&amp;z=&amp;cl=3&amp;f=8&amp;wd=ajax+12152&amp;ct=0" target="_blank"> 网上 </a> 有不少人遇到了这困惑的状态码。</p>
<p>说明</p>
<ul>
<li>Windows 下的 IE 里 new ActiveXObject(progId) 生成的 XMLHttpRequest 是 winet 的一部分。</li>
<li>IE 7 以下对 SSL ( 即 HTTPS) 的支持不够好。</li>
</ul>
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML Form 里 radio list 的用户体验细节]]></title>
    <link href="http://rank.im/2008/11/24/radio-list-user-experience-detail/"/>
    <id>http://rank.im/2008/11/24/radio-list-user-experience-detail/</id>
    <published>2008-11-24T12:34:57.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>HTML Form 里 radio list 的用户体验细节相当赞：</p>
<ul>
<li>可支持方向键</li>
<li>当 radio 最后一个选中时，按小键盘后会自动跳回第一个</li>
<li>checked 可自动触发 onclick</li>
<li>支持各种浏览器， cross-browser</li>
</ul>
<p>用这个特性，可以做一个无障碍的 TabView :)</p>
<p><a id="more"></a></p>
<figure class="highlight html"><pre><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" 
"http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">title</span>&gt;</span>Rank's HTML document<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=gb2312"</span>&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Creator.name"</span> <span class="attribute">content</span>=<span class="value">"Rank"</span>&gt;</span>
 <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">title</span>=<span class="value">"default"</span> <span class="attribute">media</span>=<span class="value">"screen"</span>&gt;</span><span class="css">
 <span class="comment">/*&lt;![CDATA[*/</span>
    <span class="tag">body</span> <span class="rules">{ <span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">13</span>px/<span class="number">1.5</span> arial</span></span>; <span class="rule">}</span></span>
 <span class="comment">/*]]&gt;*/</span>
 </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>radio list 的妙用<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>

    <span class="tag">&lt;<span class="title">ol</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span>可支持方向键<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span>当 radio 最后一个选中时，按小键盘后会自动跳回第一个<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span>checked 可自动触发 onclick<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span>支持各种浏览器,cross-browser<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">ol</span>&gt;</span>

    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>demo<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>

    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"wrap"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"radio_n"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"radio_n"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"radio_n"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"ad"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>

    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"><span class="comment">//&lt;![CDATA[</span>
    document.getElementById(<span class="string">'wrap'</span>).onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
      document.getElementById(<span class="string">'ad'</span>).innerHTML = (<span class="string">'never-online \'s weblog'</span>) + <span class="built_in">Math</span>.random();
    }
    <span class="comment">//]]&gt;</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></figure>


<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<p>HTML Form 里 radio list 的用户体验细节相当赞：</p>
<ul>
<li>可支持方向键</li>
<li>当 radio 最后一个选中时，按小键盘后会自动跳回第一个</li>
<li>checked 可自动触发 onclick</li>
<li>支持各种浏览器， cross-browser</li>
</ul>
<p>用这个特性，可以做一个无障碍的 TabView :)</p>
<p>]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从 trim 原型函数看 JS 正则表达式的性能]]></title>
    <link href="http://rank.im/2008/11/24/trim-to-regexp-performance/"/>
    <id>http://rank.im/2008/11/24/trim-to-regexp-performance/</id>
    <published>2008-11-24T12:20:21.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">问题</h2>
<p>一般情况下用正则写法为：</p>
<figure class="highlight js"><pre>&lt;script type=<span class="string">"text/javascript"</span>&gt;<span class="comment">//&lt;![CDATA[</span>
  <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\t ]+|[\s\t ]+$/g</span>, <span class="string">''</span>);
  }
  s = <span class="string">' rank\'s weblog, www.rank.im '</span>;
  alert(s.trim().length);
<span class="comment">//]]&gt;&lt;/script&gt;</span>
</pre></figure>


<p>如果遇到大数据的变长字符串的话就会发现这个是很耗资源的。<br>效率并不高，有的时候甚至无法忍受。</p>
<a id="more"></a>

<figure class="highlight html"><pre><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span>
 <span class="tag">&lt;<span class="title">title</span>&gt;</span>rank's html<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span> /&gt;</span> 
 <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
  <span class="tag">&lt;<span class="title">textarea</span>&gt;</span>请在这里写足够多的空格或者 tab 字符。<span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"><span class="comment">//&lt;![CDATA[</span>
  <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\t ]+|[\s\t ]+$/g</span>, <span class="string">''</span>);
  }
  <span class="keyword">var</span> s = document.getElementsByTagName(<span class="string">'textarea'</span>)[<span class="number">0</span>].value
  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();
  s.trim();
  alert(<span class="keyword">new</span> <span class="built_in">Date</span>()-d);
<span class="comment">//]]&gt;</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></figure>


<h2 id="dfa">DFA</h2>
<p>在解释这个原因的时候想起以前看到 《 Master regular expression 》 里面有提到过。</p>
<p>NFA 和 DFA 引擎是有区别的。</p>
<blockquote>
<p>DFA 与 NFA 机制上的不同带来 5 个影响：</p>
<ol>
<li>DFA 对于文本串里的每一个字符只需扫描一次，比较快，但特性较少；<ul>
<li>NFA 要翻来覆去吃字符、吐字符，速度慢，但是特性丰富，所以反而应用广泛。</li>
<li>当今主要的正则表达式引擎，如 Perl 、 Ruby 、 Python 的 re 模块、 Java 和 .NET 的 regex 库，都是 NFA 的。</li>
</ul>
</li>
<li>只有 NFA 才支持 lazy 和 backreference （后向引用）等特性；</li>
<li>NFA 急于邀功请赏，所以最左子正则式优先匹配成功，因此偶尔会错过最佳匹配结果；<ul>
<li>DFA 则是“最长的左子正则式优先匹配成功”。</li>
</ul>
</li>
<li>NFA 缺省采用 greedy 量词 ( 就是对于/.*/、/\w+/这样的“重复 n ”次的模式，以贪婪方式进行，尽可能匹配更多字符，直到不得以罢手为止 ) ， NFA 会优先匹配量词。</li>
<li>NFA 可能会陷入递归调用的陷阱而表现得性能极差。</li>
</ol>
</blockquote>
<p>JS 是 NFA 引擎。</p>
<h2 id="backtracking-">backtracking （回朔）</h2>
<blockquote>
<p>当 NFA 发现自己吃多了，一个一个往回吐，边吐边找匹配，这个过程叫做 backtracking 。</p>
</blockquote>
<p>由于存在这个过程，在 NFA 匹配过程中，特别是在编写不合理的正则式匹配过程中，文本被反复扫描，效率损失是不小的。明白这个道理，对于写出高效的正则表达式很有帮助。</p>
<h2 id="-">定位/分析原因</h2>
<p>在解释上面的 trim 原型方法的时候。<br>经过测试，有几个方法是可以化解 JS NFA 引擎的回朔次数：</p>
<ul>
<li><p>去掉限定的量词，即改成</p>
  <figure class="highlight js"><pre> <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\t ]+|[\s\t ]$/g</span>, <span class="string">''</span>);
 }

</pre></figure>
</li>
<li><p>去掉字符串尾匹配。</p>
  <figure class="highlight js"><pre> <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\t ]+/g</span>, <span class="string">''</span>);
 }
	
</pre></figure>
</li>
<li><p>加入多行匹配。</p>
  <figure class="highlight js"><pre><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\t ]+|[\s\t ]+$/mg</span>, <span class="string">''</span>);
 }
	
</pre></figure>


</li>
</ul>
<p>从以上三种改法结合文中开头的 NFA 资料，我们可以大概的知道 trim 性能出现问题的原因</p>
<ul>
<li>量词限定将优先匹配。</li>
<li>量词限定在结尾可能会使 JS 的正则引擎不停的回朔，出现递归的一个陷阱，这个递归的深度太深。如果字符串更大一点应该会出现栈溢出了。</li>
<li>多行既然能够匹配，而且性能消耗不大。性能上没有任何问题，从一个写这个正则程序的人角度上去看，多行明显比单行要替换的空串多得多。所以第二点的结论应该是对的。</li>
</ul>
<h2 id="-trim-">改良 trim 函数</h2>
<p>首先确定匹配字符串的开始正则是没有任何效率问题的。而匹配结束的时候会出现性能问题，那可以采用正则与传统相结合来改善这个 trim 性能问题。</p>
<figure class="highlight js"><pre>  <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> s = <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\t ]+/g</span>, <span class="string">''</span>);
    从 s 后端开始查找，并回循环到最后一个非空字符串，代码略。
  }
</pre></figure>

<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">问题</h2>
<p>一般情况下用正则写法为：</p>
<figure class="highlight js"><pre>&lt;script type=<span class="string">"text/javascript"</span>&gt;<span class="comment">//&lt;![CDATA[</span>
  <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\t ]+|[\s\t ]+$/g</span>, <span class="string">''</span>);
  }
  s = <span class="string">' rank\'s weblog, www.rank.im '</span>;
  alert(s.trim().length);
<span class="comment">//]]&gt;&lt;/script&gt;</span>
</pre></figure>


<p>如果遇到大数据的变长字符串的话就会发现这个是很耗资源的。<br>效率并不高，有的时候甚至无法忍受。</p>
]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[十一北京五日游记（二）]]></title>
    <link href="http://rank.im/2008/10/08/tourism-in-beijing-at-national-day-2/"/>
    <id>http://rank.im/2008/10/08/tourism-in-beijing-at-national-day-2/</id>
    <published>2008-10-07T19:30:15.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="10-3-">10.3 颐和园一日游</h2>
<p>值得一说的是当天去颐和园之前，我认为我在中关村附近应该离那很近，坐车去那应该要不了多久。<br>事实上恰恰相反，在快到颐和园那的一条路堵死了。</p>
<p>只好步行了十几分钟才到了颐和园。<br>进了园被人潮所包围，没有找到更好的地方拍风景。</p>
<p>瞧这黑压压的人群。</p>
<a id="more"></a>

<p><img src="http://farm4.static.flickr.com/3069/2915309402_564f955f71.jpg?v=0" alt=""></p>
<p>昆明湖旁的荷塘还是不错的，其实在这照片中我更想说明的是人多 :)</p>
<p>已经不知道这个楼叫啥名了-_-：</p>
<p><img src="http://farm4.static.flickr.com/3022/2914446027_398eb83281.jpg?v=0" alt=""></p>
<p>走过阁楼之后，我终于找到了一个人少，应该说是一个人也没有的地方。文昌院旁的巷子：</p>
<p><img src="http://farm4.static.flickr.com/3043/2913958127_e77463f2df.jpg?v=0" alt=""></p>
<p>还在猜想着为什么这里没有人时，看到左边那块小牌子——游客止步。</p>
<p>沿昆明湖游览。<br>昆明湖是半人工半天然的湖，还挺大的。<br>来到这里是中午，从进园的这一侧拍照过去，基本是逆光~</p>
<p><img src="http://farm4.static.flickr.com/3107/2914452131_81497a6da2.jpg?v=0" alt=""></p>
<p>佛香阁（说到佛香阁，这天一直没有去，因为我们是足足的绕了昆明湖一圈，太累了）</p>
<p><img src="http://farm4.static.flickr.com/3294/2914472001_77a4bdf942.jpg?v=0" alt=""></p>
<p>我想佛香阁的那座山是万寿山了吧。<br>这山和海还有福（蝠）山寿海一说。古人喜欢把湖比作海，包括后海，以前也是运河的作用。</p>
<p>福山是指万寿山的形状象蝙蝠，而万寿山象寿桃，是为了慈禧大寿专门改造而成的。佛香阁是仿杭州的六和塔建造的。其实北京很多宫廷景都是园林建筑，苏州和杭州自然是被模仿对象了。以后有机会一定要去杭州和苏州看一下。</p>
<p>因为人多，不方便拍风景，只能坐船在船上拍，拍到波光粼粼的湖面，很漂亮~，也会拍到十七孔桥。<br>湖中荡舟的人有的都躺在船上睡着了。</p>
<p><img src="http://farm4.static.flickr.com/3070/2914437201_aa1ac51a5d.jpg?v=0" alt="">
<img src="http://farm4.static.flickr.com/3128/2913933217_5c72d4118c.jpg?v=0" alt=""></p>
<p>在来颐和园之前，我曾在脑海里想象它是什么样子，是不是和电视剧里拍的一样，后花园式的建筑（比如象恭王府式的建筑），来到这里才发现建筑与我想象中大不一样。有那么大个湖，还有宗教式的阁楼。景和物都搭配得很得当。</p>
<p><img src="http://farm4.static.flickr.com/3153/2914806592_18f0310eb1.jpg?v=0" alt=""></p>
<p>昆明湖旁的绿地真的可以让心沉静下来，是我理想中散步的地方。（幸运的是旅游团没有朝这边走，所以人都比较少，可以让我们有足够的时间从这边欣赏湖光山色。）</p>
<p><img src="http://farm3.static.flickr.com/2268/2972330058_5e8cfe320f.jpg?v=0" alt=""></p>
<p>特别是在太阳将要落山的时候，一位年轻母亲坐在长凳上。旁边是她的孩子静静躺在摇篮车里，夕阳洒在他们身上。 so sweet 。 </p>
<p>快到佛香阁的时候，看到有苏州街</p>
<p><img src="http://farm4.static.flickr.com/3153/2914403985_b8f1bbf371.jpg?v=0" alt=""></p>
<p>在佛香阁下有一条长廊，这条长廊上都有壁绘，每一幅都是昆明湖一景。
可惜的是都没有几幅比较清晰一些的画了。由于长廊人太多，就没有拍照，只能在下边拍一张佛香阁的照片</p>
<p><img src="http://farm4.static.flickr.com/3059/2971465983_111b4dcba2.jpg?v=0" alt=""></p>
<p>到佛香阁楼下时已经到点关闭了...不过倒也不后悔，毕竟是彻底的看了一遍颐和园了。</p>
<p>时候不早了，接下来就是去吃了。
在出租车上已经想好去簋街了的，在出租车师傅聊起来我们要去吃北京风味的小吃，师傅是老北京了，直接推荐我们去护国寺。说护国寺那里的比较正宗。于是临时去了护国寺。
护国寺没有想象中热闹，旅游的人来这里的也相对较少，看到不少北京口音的人来到这吃。街道也比较暗。
吃了“三宝羊汤”，爆肚，炒肝，面茶... 等等十几种小吃，最好吃的就是第一道菜，三宝羊汤了</p>
<p><img src="http://farm4.static.flickr.com/3082/2915339252_5225676453.jpg?v=0" alt=""></p>
<p>味道很鲜。很不错，极力推荐。</p>
<h2 id="10-4-">10.4 鸟巢，水立方，全聚德</h2>
<p>大概十点左右，昨天订的二十一客蛋糕到了，很激动的下去拿~服务人员态度很好，而且要验货的。并解释由于是自行车送货可能有颠簸，所以蛋糕上的巧克力会有一点点散落。</p>
<p>之前有在公司吃过一次二十一客，是来做推广的时候吃的，感觉很不错，一直想着有机会再吃一次。现在终于愿望成真了。</p>
<p>包装很不错，有质感的牛皮纸，用麻绳系着。拆开里面还带有刀叉。刀叉很 Q 。</p>
<p><img src="http://farm4.static.flickr.com/3017/2914128083_3a04cd8682.jpg?v=0" alt="">
<img src="http://farm4.static.flickr.com/3049/2914967466_883b2db2e0.jpg?v=0" alt=""></p>
<p>拿出来后第一感觉是巧克力很多~，多得吃不完...</p>
<p><img src="http://farm4.static.flickr.com/3183/2914127465_297be8c767.jpg?v=0" alt=""></p>
<p>由于在这几天都没有吃到烤鸭，今天不得不去趟全聚德。
听昨天的师傅说和平门的全聚德比较好但又不接受预定。所以下午四点我们就出发去全聚德去看看还有没有空位。</p>
<p><img src="http://farm4.static.flickr.com/3273/2914156103_86854ea0b6.jpg?v=0" alt=""></p>
<p>很幸运。我们到的时间刚好合适。还有空位。点了两个网上好评比较多的菜，烤鸭，咸水鸭肝。还有一个记不清了（叫什么四宝来着），但总之是划不来的菜，四宝中的一宝还是笋，不是肉...</p>
<p>烤鸭拿出来了，服务员上来背课文似的说烤鸭有三种吃法之类的。我是完全没听清...就任师傅宰割吧（全聚德也够 BT ，收 10% 的服务费，国际化和本地化都有了）</p>
<p><img src="http://farm4.static.flickr.com/3239/2914157521_22df2431b9.jpg?v=0" alt="">
<img src="http://farm4.static.flickr.com/3184/2914182905_c5a86bae19.jpg?v=0" alt=""></p>
<p>饭饱也该去鸟巢和水立方了。实际上是去走个形式。而且听说还不让进场馆里，进的话要一百块。
反正每次从机场过来中关村都会经过水立方，感觉从电视上和真正看到完全是两个概念。</p>
<p>当走近水立方和鸟巢这个大笼子 ( 旁边都围着的，感觉象笼子）的时候，就有人要问你是否要票， 5 块十块皆不等。</p>
<p>我们走到门口问了一下，进去笼子是否要钱，他们说进的确是要票的。有一位说看我们这么想看就给我们一张他捡到的票让我们进去。我们感激得不得了。但很奇怪的是他说不管几个人一张票就可以了，让我觉得很不可思议。</p>
<p><img src="http://farm4.static.flickr.com/3082/2914278407_33e89b8d19.jpg?v=0" alt=""></p>
<p>本来还想进去里面的餐厅吃顿饭的，但无奈于进鸟巢的门票太贵。。。</p>
<p><img src="http://farm4.static.flickr.com/3250/2914279223_a5ec9f7f1e.jpg?v=0" alt=""></p>
<p>水立方不太好拍。外边的人都站满了。只能以这个角度拍一张了</p>
<p><img src="http://farm4.static.flickr.com/3266/2915121860_5211efaa04.jpg?v=0" alt=""></p>
<p>回来的时候发现其实周围的公园倒是挺有特色。这个是灯塔。</p>
<p><img src="http://farm4.static.flickr.com/3274/2915099354_68fc8b90de.jpg?v=0" alt="">
<img src="http://farm3.static.flickr.com/2315/2914258201_24272621f8.jpg?v=0" alt=""></p>
<p>下面是一块玻璃。小资范。</p>
<p><img src="http://farm4.static.flickr.com/3278/2914257081_d7294563c8.jpg?v=0" alt=""></p>
<p>回顾这几天的旅游还是挺不错的。就是开销也挺大。 
出来旅游一下了，也算是让自己放松心情。</p>
<p>总的来看我个人还是最喜欢颐和园和故宫。<br>有机会的话还得再去游玩一下。但一定要是旅游淡季人比较少的时候。</p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="10-3-">10.3 颐和园一日游</h2>
<p>值得一说的是当天去颐和园之前，我认为我在中关村附近应该离那很近，坐车去那应该要不了多久。<br>事实上恰恰相反，在快到颐和园那的一条路堵死了。</p>
<p>只好步行了十几分钟才到了颐和园。<br>进了园被人潮所包围，没有找到更好的地方拍风景。</p>
<p>瞧这黑压压的人群。</p>
]]></summary>
    
      <category term="life" scheme="http://rank.im/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[十一北京五日游记（一）]]></title>
    <link href="http://rank.im/2008/10/08/tourism-in-beijing-at-national-day-1/"/>
    <id>http://rank.im/2008/10/08/tourism-in-beijing-at-national-day-1/</id>
    <published>2008-10-07T17:50:05.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<p>来北京工作半年有余了。</p>
<p>由于工作的原因没有太多时间去看看北京这座城市。正好十一有空，也顾不上人多，去看了看北京的一些传统的旅游景点。</p>
<p>也尝了一些北京特色的小吃。</p>
<a id="more"></a>

<h2 id="9-30-">9.30 景山，北海公园，后海</h2>
<p>在早上一出来，先是去了旁边中关村的津乐汇买了一件衣服。在北京中关村这里基本不知道去哪里买衣服，津乐汇就是我到北京后唯一买衣服的地方。而且我们男的没有太多心思去精挑细选，看到合适的就买了。 </p>
<p>这个是旁边比较高的楼，中钢大厦。  </p>
<p><img src="http://farm4.static.flickr.com/3023/2913993371_38a29338c5.jpg?v=0" alt=""></p>
<p>景山，北海公园，后海这个线路是兔子推荐的，很不错，基本是一条直线的线路，去景山可以看到故宫的全貌。但由于游人太多，也没有拍到故宫的全貌。最大的感触是又一次体会到了中国特色，看到景区里很多竹子上刻下了许多人的到此一游。</p>
<p>也在北京第一次看到了老人用海绵笔/拖把来写字，并且写得很漂亮。</p>
<p><img src="http://farm4.static.flickr.com/3295/2910015614_7745a9aff0.jpg?v=0" alt="">
<img src="http://farm4.static.flickr.com/3168/2910015620_c87f327d62.jpg?v=0" alt=""></p>
<p>在后海的时候发现有一条街叫“烟袋斜街”，</p>
<p><img src="http://farm4.static.flickr.com/3192/2914857582_4948ff7fc3.jpg?v=0" alt=""></p>
<p>这条街卖的都是比较有特色的小玩意儿（至少对于我来说）比如说烛台，非常漂亮。基本以很古典的造型居多，而且价格也不贵，我们还买了几个，摆放在家里是不错的装饰物。东西特别，连店面的装修也比较有特色。让我们来回逛了两次，由于我们带的是卡片机，在晚上拍照基本不是模糊就是噪点多，就不上图了。</p>
<h2 id="10-1-">10.1 北大，清华</h2>
<p>北大十一期间不让进，没办法我们就只能去清华了。</p>
<p>去到的第一感觉就是游人比清华学生多。<br>基本没法把一些景点的照片照全，当然在某些地方也是没有人的，比如：</p>
<p><img src="http://farm3.static.flickr.com/2408/2914396541_01bc4b5083.jpg?v=0" alt=""></p>
<p>傍晚一些的时候，我们打算去“芝兰园”吃自助餐。这个地方是来北京的一位朋友介绍的，他说他们原来在中央美院读书的时候，当时我还在家乡。他们就经常去那吃。现在我到了北京也要去尝尝他们推荐的餐厅，而且这个餐厅的价格很便宜。据后来我们考证。有卡 15 元吃自助餐，没卡买票的话 20 块。</p>
<p>说回流水帐，我们询问校园里的同学，得知芝华园在东北门，我们当时是靠近西门附近。需要步行近二十至三十分钟方能到东北门。反正来了清华，走会儿就走会儿吧，于是决定步行去东北门。</p>
<p>后来才后悔了，发现这段路程是多么漫长，多么“阴森”。说到漫长是因为确实是有段距离......<br>说到阴森，是感觉清华的照明设施是有必要改善一下了，路灯的灯光很暗，让人感觉心凉凉的。有的叉路口放眼望去，一个身影都没有，路的尽头只有黑暗。在这种情况下很容易联想到鬼片。</p>
<p>好不容易走到芝兰园。营业时间写着最晚到 8 点，我们一看表，差不多七点半了。。。买票进去看了一下，基本都被扫空了~看了一下周围的同学，看上去象是大一大二的同学。还有开小聚会什么的。</p>
<p>总的来说，芝兰园的饭菜是很不错的。物美价廉~，比平常吃平常在公司周围吃快餐还便宜一些。如果离得近的话，应该是我们饭团的目标了。</p>
<h2 id="10-2-">10.2 恭王府，故宫</h2>
<p>这天我们大清早就起早，准备坐公交车去....</p>
<p>坐哪路坐我忘了，但要转车，而且是动物园那，到了动物园那我们下车后才后悔了....堵车。走路比坐车快~得出经验。十一出门旅游千万别坐公交车，应该能走路就走路，如果路远能坐地铁坐地铁，否则就打车吧。我们花了两个小时费尽周折从中关村到了恭王府。</p>
<p>在王府旁看到了真正有北京风味的门当，这些倒是没有多少游人会注意。除了门当外，还有这个我觉得是很有北京味的，只是没有多少人去关注它。</p>
<p><img src="http://farm4.static.flickr.com/3143/2914896266_80c5d9893e.jpg?v=0" alt="">
<img src="http://farm4.static.flickr.com/3293/2914896274_20eafbdea3.jpg?v=0" alt=""></p>
<p>精致。漂亮。威武。</p>
<p>恭王府是和坤住的地方。它是典型四合院建筑，且是四合院再套四合院。也再次看到了北京的古典建筑皆是，红、黄、绿、蓝几种颜色组成的。恭王府也不算很大，所以游人也都挤着走的，我们通常是看着有团来就先一拍或慢一拍的去看景点。</p>
<p><img src="http://farm4.static.flickr.com/3104/2915205658_3e0a4d4b0e.jpg?v=0" alt=""></p>
<p>也同时发现一个特点——很多人都拿单反去的~~
在不大的恭王府里，发现仅有的一个小角落没有人去游览。这么安静的地方，才让人感觉符合王府的意境，虽然不是大宅子。</p>
<p><img src="http://farm4.static.flickr.com/3075/2915171068_c52ce332ee_o.jpg" alt=""></p>
<p>由于打车的时候司机已经不愿意带我们去故宫了（因为堵车）。<br>我们只能步行去故宫，步行的时候才知道，原来景山就在旁边。这才知道什刹海旁边什么都有。<br>这儿的风水够好的。</p>
<p>走了差不多三十分钟的路程，到了故宫。那时已经差不多是下午四点了，故宫五点关门。还是决定进去游览一番~
从午门进的。（看到地图的时候才知道是午门）这让我经常想起电视剧里做皇帝的都是赏给某些运气不好的大臣——午门斩首......</p>
<p>进了故宫之后再次感叹这故宫宏伟。<br>才知道电视上的那些艺术加工远没有在现场看到的那样令人感叹。</p>
<p>与 birdnest 之类建筑的宏伟截然不同，故宫显然带着中华历史的宏伟。<br>进去之后的人，大多数都以张开双臂来摆 pose 。我也跟风一把。</p>
<p><img src="http://farm4.static.flickr.com/3249/2914754172_15334b3be4_o.jpg" alt=""></p>
<p>当然，游人的数量也是让人感叹的。这更让我感觉一个个是从鬼门关午门进去....<br>从太和殿上看过去，也能体会一下万人之上的感觉~难怪张艺谋会找如此多人去拍黄金甲~</p>
<p>看到北京的这些建筑才知道红配绿可以搭配得这么漂亮。</p>
<p><img src="http://farm4.static.flickr.com/3048/2914073949_f09e109a74.jpg?v=0" alt=""></p>
<p>经过两个朝代的建设。他的每一个细节都值得我们去欣赏。<br>这是故宫里很常见的木门，但上面的边纹全都做得非常的精致，活灵活现。其实并不是只有皇帝的龙椅才漂亮。</p>
<p><img src="http://farm4.static.flickr.com/3115/2914329815_d0360a0f79.jpg?v=0" alt="">
<img src="http://farm4.static.flickr.com/3080/2914331135_4f4681382b_o.jpg" alt=""></p>
<p>由于时间太紧，只有一个多小时的时间去游故宫，还有很多地方都没去，或者已经闭馆了，实在有点遗憾。<br>下次有机会一定要全部走遍。</p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<p>来北京工作半年有余了。</p>
<p>由于工作的原因没有太多时间去看看北京这座城市。正好十一有空，也顾不上人多，去看了看北京的一些传统的旅游景点。</p>
<p>也尝了一些北京特色的小吃。</p>
]]></summary>
    
      <category term="life" scheme="http://rank.im/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Firefox 2 正则表达式全半角问题]]></title>
    <link href="http://rank.im/2008/08/23/firefox-regexp-issue/"/>
    <id>http://rank.im/2008/08/23/firefox-regexp-issue/</id>
    <published>2008-08-23T10:56:41.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">问题</h2>
<p>先问一个问题, 在 firefox 2 里,正则表达式字符&quot;\d&quot;全等于&quot;[0-9]&quot;吗?</p>
<p>有可能你会答「是，他们相等」，也有可能你去查了查手册, 看到以下的解释:</p>
<blockquote>
<p>\d Matches a nondigit character. Equivalent to [^0-9]. 
匹配一个数字字符。等价于 [0-9] 。</p>
</blockquote>
<p>那我们测试一下以下代码：</p>
<figure class="highlight js"><pre> <span class="comment">//http://rank.im</span>
 alert(<span class="regexp">/^\d{2}$/</span>.test(<span class="string">"１２"</span>));
 alert(<span class="string">'请注意,１２是全角'</span>);
</pre></figure>


<a id="more"></a>

<p>再试试这个例子：</p>
<figure class="highlight js"><pre> alert(<span class="regexp">/^[0-9]{2}$/</span>.test(<span class="string">"１２"</span>));
 alert(<span class="string">'请注意,１２是全角'</span>);
</pre></figure>


<p>Firefox 2 里会出现「\d 」等于 半角 [0-9] 和 全角 [0-9] 现象。</p>
<h2 id="-">解决办法</h2>
<p>Firefox 2 里用正则表达式\d 字符时,会将全角转义成半角再进行匹配, 与手册描述不一致。  </p>
<p>解决办法即是：以后大家用正则还是直接用 [0-9] 去匹配数字。</p>
<p>这是否意味着是 Firefox 2 的 bug 呢？非也。  </p>
<p>《 Master Regular Expression ，精通正则表达式》书中说是不同的流派的问题。</p>
<blockquote>
<p>Matches any non-decimal digit. Equivalent to [\P{Nd}] for Unicode and [^0-9] for non-Unicode, ECMAScript behavior.</p>
</blockquote>
<p>另， Firefox 后续版本已无问题。</p>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">问题</h2>
<p>先问一个问题, 在 firefox 2 里,正则表达式字符&quot;\d&quot;全等于&quot;[0-9]&quot;吗?</p>
<p>有可能你会答「是，他们相等」，也有可能你去查了查手册, 看到以下的解释:</p>
<blockquote>
<p>\d Matches a nondigit character. Equivalent to [^0-9]. 
匹配一个数字字符。等价于 [0-9] 。</p>
</blockquote>
<p>那我们测试一下以下代码：</p>
<figure class="highlight js"><pre> <span class="comment">//http://rank.im</span>
 alert(<span class="regexp">/^\d{2}$/</span>.test(<span class="string">"１２"</span>));
 alert(<span class="string">'请注意,１２是全角'</span>);
</pre></figure>


]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IE 在 DOM 操作有表单控件时的 bug]]></title>
    <link href="http://rank.im/2008/07/20/ie-form-check-bug/"/>
    <id>http://rank.im/2008/07/20/ie-form-check-bug/</id>
    <published>2008-07-20T11:44:21.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="bug-">bug 描述</h2>
<ul>
<li>影响的范围: IE 的所有版本</li>
<li>在表单的 radio/checkbox 控件中，一旦他们的 DOM 结构被更改过就会出现这个 bug 。</li>
<li>操作了表单 radio/checkbox 的 DOM 结构时（或者直接影响了他们的结构时）选中的 checkbox/radio 将会自动恢复到默认状态，</li>
<li>有如点了 reset 按钮一样。</li>
</ul>
<p><a id="more"></a>
bug 重现</p>
<figure class="highlight html"><pre><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" 
"http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">title</span>&gt;</span>Rank's HTML document<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=gb2312"</span> /&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span> /&gt;</span> 
 <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">title</span>=<span class="value">"default"</span> <span class="attribute">media</span>=<span class="value">"screen"</span>&gt;</span><span class="css">
 <span class="comment">/*&lt;![CDATA[*/</span>
      <span class="tag">body</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">80</span>%</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">1.5</span></span></span>; <span class="rule">}</span></span>
      <span class="tag">body</span>, <span class="tag">button</span> <span class="rules">{ <span class="rule"><span class="attribute">font-family</span>:<span class="value">arial</span></span>; <span class="rule">}</span></span>
      <span class="tag">button</span> <span class="rules">{ <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span> <span class="number">0.3</span>em <span class="number">0</span> <span class="number">0.3</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">h1</span>, <span class="tag">h3</span> <span class="rules">{ <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule">}</span></span>
      <span class="tag">h1</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">2.3</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">h3</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">1.3</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">form</span> <span class="rules">{ <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>; <span class="rule">}</span></span>
      <span class="tag">div</span><span class="class">.link</span> <span class="rules">{ <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">1</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">div</span><span class="class">.content</span> <span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#ffc</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">1</span>em</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1</span>px solid <span class="hexcolor">#222</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">1</span>em <span class="number">0</span> <span class="number">1</span>em</span></span>; <span class="rule">}</span></span>
      <span class="id">#rdoWrapper</span> <span class="rules">{ <span class="rule">}</span></span>
      <span class="id">#hd</span> <span class="rules">{ <span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>; <span class="rule">}</span></span>
 <span class="comment">/*]]&gt;*/</span>
 </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"hd"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">h1</span>&gt;</span> IE form control bug <span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"link"</span>&gt;</span>from: <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://www.never-online.net/blog"</span>&gt;</span><span class="tag">&lt;<span class="title">em</span>&gt;</span>never-online weblog<span class="tag">&lt;/<span class="title">em</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"rdoWrapper"</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">h3</span>&gt;</span> 1. Select radio to checked <span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
      <span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-1"</span> <span class="attribute">value</span>=<span class="value">"rdo-1"</span> <span class="attribute">checked</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-1"</span>&gt;</span>radio1<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-2"</span> <span class="attribute">value</span>=<span class="value">"rdo-2"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-2"</span>&gt;</span>radio2<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-3"</span> <span class="attribute">value</span>=<span class="value">"rdo-3"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-3"</span>&gt;</span>radio3<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-4"</span> <span class="attribute">value</span>=<span class="value">"rdo-4"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-4"</span>&gt;</span>radio4<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">h3</span>&gt;</span> 2. Click button to change dom structure <span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
        <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"p"</span>&gt;</span><span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">onclick</span>=<span class="value">"handleChangeDom()"</span>&gt;</span>test<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"><span class="comment">//&lt;![CDATA[</span>
      <span class="function"><span class="keyword">function</span> <span class="title">getRadioValue</span><span class="params">(ctlName)</span> {</span>
        <span class="keyword">var</span> ctls = document.getElementsByName(ctlName);
        <span class="keyword">var</span> len = ctls.length;
        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++) {
          <span class="keyword">if</span> (ctls[i].checked) {
            <span class="keyword">return</span> ctls[i].value;
          }
        }
      }
      <span class="function"><span class="keyword">function</span> <span class="title">handleChangeDom</span><span class="params">()</span> {</span>
        alert(<span class="string">'before append, you select radio value is "'</span>+getRadioValue(<span class="string">'rdo'</span>)+<span class="string">'"'</span>);
        <span class="keyword">var</span> wrapper = document.getElementById(<span class="string">'rdoWrapper'</span>);
        document.body.appendChild(wrapper);
        alert(<span class="string">'after append, you select radio value is "'</span>+getRadioValue(<span class="string">'rdo'</span>)+<span class="string">'"'</span>);
      }
    <span class="comment">//]]&gt;</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></figure>


<h2 id="-">解决方法</h2>
<p>可以在操作 DOM 之前，用 「 defaultChecked 」 来设置 checked 的值。</p>
<figure class="highlight html"><pre><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" 
"http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">title</span>&gt;</span>Rank's HTML document<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=gb2312"</span> /&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span> /&gt;</span> 
 <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">title</span>=<span class="value">"default"</span> <span class="attribute">media</span>=<span class="value">"screen"</span>&gt;</span><span class="css">
 <span class="comment">/*&lt;![CDATA[*/</span>
      <span class="tag">body</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">80</span>%</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">1.5</span></span></span>; <span class="rule">}</span></span>
      <span class="tag">body</span>, <span class="tag">button</span> <span class="rules">{ <span class="rule"><span class="attribute">font-family</span>:<span class="value">arial</span></span>; <span class="rule">}</span></span>
      <span class="tag">button</span> <span class="rules">{ <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span> <span class="number">0.3</span>em <span class="number">0</span> <span class="number">0.3</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">h1</span>, <span class="tag">h3</span> <span class="rules">{ <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule">}</span></span>
      <span class="tag">h1</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">2.3</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">h3</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">1.3</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">form</span> <span class="rules">{ <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>; <span class="rule">}</span></span>
      <span class="tag">div</span><span class="class">.link</span> <span class="rules">{ <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">1</span>em</span></span>; <span class="rule">}</span></span>
      <span class="tag">div</span><span class="class">.content</span> <span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#ffc</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">1</span>em</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1</span>px solid <span class="hexcolor">#222</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">1</span>em <span class="number">0</span> <span class="number">1</span>em</span></span>; <span class="rule">}</span></span>
      <span class="id">#rdoWrapper</span> <span class="rules">{ <span class="rule">}</span></span>
      <span class="id">#hd</span> <span class="rules">{ <span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>; <span class="rule">}</span></span>
 <span class="comment">/*]]&gt;*/</span>
 </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"hd"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">h1</span>&gt;</span> fixed IE form control bug <span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"link"</span>&gt;</span>from: <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://www.never-online.net/blog"</span>&gt;</span><span class="tag">&lt;<span class="title">em</span>&gt;</span>never-online weblog<span class="tag">&lt;/<span class="title">em</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"rdoWrapper"</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">h3</span>&gt;</span> 1. Select radio to checked <span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
      <span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-1"</span> <span class="attribute">value</span>=<span class="value">"rdo-1"</span> <span class="attribute">checked</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-1"</span>&gt;</span>radio1<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-2"</span> <span class="attribute">value</span>=<span class="value">"rdo-2"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-2"</span>&gt;</span>radio2<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-3"</span> <span class="attribute">value</span>=<span class="value">"rdo-3"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-3"</span>&gt;</span>radio3<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"rdo"</span> <span class="attribute">id</span>=<span class="value">"rdo-4"</span> <span class="attribute">value</span>=<span class="value">"rdo-4"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"rdo-4"</span>&gt;</span>radio4<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">h3</span>&gt;</span> 2. Click button to change dom structure <span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
        <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"p"</span>&gt;</span><span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">onclick</span>=<span class="value">"handleChangeDom()"</span>&gt;</span>test<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"><span class="comment">//&lt;![CDATA[</span>
      <span class="function"><span class="keyword">function</span> <span class="title">getRadioValue</span><span class="params">(ctlName)</span> {</span>
        <span class="keyword">var</span> ctls = document.getElementsByName(ctlName);
        <span class="keyword">var</span> len = ctls.length;
        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++) {
          <span class="keyword">if</span> (ctls[i].checked) {
            <span class="keyword">return</span> ctls[i].value;
          }
        }
      }
      <span class="function"><span class="keyword">function</span> <span class="title">setRadioDefaultValue</span><span class="params">(ctlName)</span> {</span>
        <span class="keyword">var</span> ctls = document.getElementsByName(ctlName);
        <span class="keyword">var</span> len = ctls.length;
        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++) {
          ctls[i].defaultChecked = ctls[i].checked;
        }
      }
      <span class="function"><span class="keyword">function</span> <span class="title">handleChangeDom</span><span class="params">()</span> {</span>
        alert(<span class="string">'before append, you select radio value is "'</span>+getRadioValue(<span class="string">'rdo'</span>)+<span class="string">'"'</span>);
        setRadioDefaultValue(<span class="string">'rdo'</span>);
        <span class="keyword">var</span> wrapper = document.getElementById(<span class="string">'rdoWrapper'</span>);
        document.body.appendChild(wrapper);
        alert(<span class="string">'after append, you select radio value is "'</span>+getRadioValue(<span class="string">'rdo'</span>)+<span class="string">'"'</span>);
      }
    <span class="comment">//]]&gt;</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></figure>


<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="bug-">bug 描述</h2>
<ul>
<li>影响的范围: IE 的所有版本</li>
<li>在表单的 radio/checkbox 控件中，一旦他们的 DOM 结构被更改过就会出现这个 bug 。</li>
<li>操作了表单 radio/checkbox 的 DOM 结构时（或者直接影响了他们的结构时）选中的 checkbox/radio 将会自动恢复到默认状态，</li>
<li>有如点了 reset 按钮一样。</li>
</ul>
<p>]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript 标准 DOM Range 操作 (3)]]></title>
    <link href="http://rank.im/2006/09/30/javascript-dom-range-3/"/>
    <id>http://rank.im/2006/09/30/javascript-dom-range-3/</id>
    <published>2006-09-30T12:33:20.000Z</published>
    <updated>2014-04-04T02:39:20.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://rank.im/2006/09/30/javascript-dom-range-1/">Javascript 标准 DOM Range 操作 (1)</a></li>
<li><a href="http://rank.im/2006/09/30/javascript-dom-range-2/">Javascript 标准 DOM Range 操作 (2)</a></li>
</ul>
<h2 id="-range-">从 Range 中插入一些数据</h2>
<p>前一节的几个方法解决了如何移除 Range 中所选中的 fragment 。
现在来看， insertNode() 方法可以插入一个节点到 Range 中。</p>
<p>假如我想把以下的节点插如 Range 中，将如何操作呢？</p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: red"</span>&gt;</span>Inserted text<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
</pre></figure>



<a id="more"></a>

<p>看下面的代码：</p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"p1"</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="title">b</span>&gt;</span> World<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="keyword">var</span> oP1 = document.getElementById(<span class="string">"p1"</span>);
<span class="keyword">var</span> oHello = oP1.firstChild.firstChild;
<span class="keyword">var</span> oWorld = oP1.lastChild;
<span class="keyword">var</span> oRange = document.createRange();
<span class="keyword">var</span> oSpan = document.createElement(<span class="string">"span"</span>);
oSpan.style.color = <span class="string">"red"</span>;
oSpan.appendChild(document.createTextNode(<span class="string">"Inserted text"</span>));
 
oRange.setStart(oHello, <span class="number">2</span>);
oRange.setEnd(oWorld, <span class="number">3</span>);
oRange.insertNode(oSpan);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></figure>


<p>那么原来的 HTML 将会变成这样：</p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"p1"</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>He<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: red"</span>&gt;</span>Inserted text<span class="tag">&lt;/<span class="title">span</span>&gt;</span>llo<span class="tag">&lt;/<span class="title">b</span>&gt;</span> World<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</pre></figure>


<p>surroundContents() 的参数为一个 node ，它将这个 node 加入到 Range 里，看这个示例：</p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"p1"</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="title">b</span>&gt;</span> World<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="keyword">var</span> oP1 = document.getElementById(<span class="string">"p1"</span>);
<span class="keyword">var</span> oHello = oP1.firstChild.firstChild;
<span class="keyword">var</span> oWorld = oP1.lastChild;
<span class="keyword">var</span> oRange = document.createRange();
<span class="keyword">var</span> oSpan = document.createElement(<span class="string">"span"</span>);
oSpan.style.backgroundColor = <span class="string">"yellow"</span>;
 
oRange.setStart(oHello, <span class="number">2</span>);
oRange.setEnd(oWorld, <span class="number">3</span>);
oRange.surroundContents(oSpan);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></figure>


<p>在 「 oRange 」 选取的范围内有一个我们新生成的节点 「 span 」，因此选取的 Range 的背景变成了黄色。</p>
<h2 id="collapse-">collapse() 方法</h2>
<p>collapse() 方法只有一个布尔型的参数，该参数为可选的，默认为 false 。<br>为 true 时折叠到 Range 边界的首部，为 false 时折叠到 Range 尾部。</p>
<p><img src="/images/javascript-dom-range/30_174339_domranges6.gif" alt=""></p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"p1"</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="title">b</span>&gt;</span> World<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="keyword">var</span> oP1 = document.getElementById(<span class="string">"p1"</span>);
<span class="keyword">var</span> oHello = oP1.firstChild.firstChild;
<span class="keyword">var</span> oWorld = oP1.lastChild;
<span class="keyword">var</span> oRange = document.createRange();
oRange.setStart(oHello, <span class="number">2</span>);
oRange.setEnd(oWorld, <span class="number">3</span>);
oRange.collapse(<span class="literal">true</span>); 
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></figure>


<p>如果你想知道该 Range 是否已经折叠，可以用 collapsed 属性来得到 true 或者 false 。<br>示例：</p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"p1"</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"p2"</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="keyword">var</span> oP1 = document.getElementById(<span class="string">"p1"</span>);
<span class="keyword">var</span> oP2 = document.getElementById(<span class="string">"p2"</span>);
<span class="keyword">var</span> oRange = document.createRange();
oRange.setStartAfter(oP1);
oRange.setStartBefore(oP2);
alert(oRange.collapsed); <span class="comment">//outputs "true"</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></figure>


<p>上面的代码输为 true 。</p>
<p>虽然我们没有用 collapse 方法，但是由于我们的 Range 设置开始为 1 末端到 p2 的首端，没有任何元素。即&lt;/p&gt;(Range 开始 )(Range 结束 )&lt;p id=&quot;p2&quot;&gt;，所以显示的是 true 。</p>
<h2 id="range-">Range 边界的比较</h2>
<p>compareBoundaryPoints() 方法，语法：</p>
<blockquote>
<p>compare = comparerange.compareBoundaryPoints(how,sourceRange)</p>
</blockquote>
<p>参数含义：</p>
<ul>
<li>compare —— 返回 1, 0, -1 。<ul>
<li>0 为相等。</li>
<li>1 为 comparerange 在 sourceRange 之后。</li>
<li>-1 为 comparerange 在 sourceRange 之前。</li>
</ul>
</li>
<li>how —— 为 Range 常数：<ul>
<li>END_TO_END</li>
<li>END_TO_START</li>
<li>START_TO_END</li>
<li>START_TO_START</li>
</ul>
</li>
<li>sourceRange —— 一个 Range 对象的边界。</li>
</ul>
<p>看下面的例子：</p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"p1"</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="title">b</span>&gt;</span> World<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="keyword">var</span> oRange1 = document.createRange();
<span class="keyword">var</span> oRange2 = document.createRange();
<span class="keyword">var</span> oP1 = document.getElementById(<span class="string">"p1"</span>);
oRange1.selectNodeContents(oP1);
oRange2.selectNodeContents(oP1);
oRange2.setEndBefore(oP1.lastChild);
alert(oRange1.compareBoundaryPoints(Range.START_TO_START, oRange2)); 
<span class="comment">//outputs 0</span>
alert(oRange1.compareBoundaryPoints(Range.END_TO_END, oRange2)); 
<span class="comment">//outputs 1;</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></figure>


<p>下图为这两个 Range 的示意图，结合代码和上面的说明，可以清晰的分析出结果了。</p>
<p><img src="/images/javascript-dom-range/01_022322_domranges7.gif" alt=""></p>
<h2 id="-clone-range">克隆 (clone)Range</h2>
<p>这个操作很简单，只需要一句语句即可：</p>
<figure class="highlight js"><pre><span class="keyword">var</span> oNewRange = oRange.cloneRange();
</pre></figure>


<p>cloneRange() 方法将返回一个当前 Range 的副本。当然，它也是 Range 对象。</p>
<h2 id="-range-">清除 Range 所占的系统资源</h2>
<p>当你创建了 Range 对象最好用 detach() 方法来清除它所占的系统资源。<br>虽然不清除， GC （垃圾收集器）也会将其收集，但用 detach() 释放是一个好习惯。</p>
<p>语法为：</p>
<figure class="highlight js"><pre>oRange.detach();
</pre></figure>


<p>下面一个示例在 Mozilla 中，利用 Range 可以模拟出 IE 中的 element.insertAdjacentHTML() 方法，</p>
<figure class="highlight js"><pre><span class="keyword">if</span> (browser.isMozilla) {
	 HTMLElement.prototype.insertAdjacentHTML = <span class="function"><span class="keyword">function</span> <span class="params">(sWhere, sHTML)</span> {</span>
		 <span class="keyword">var</span> df; <span class="keyword">var</span> r = <span class="keyword">this</span>.ownerDocument.createRange();
		 <span class="keyword">switch</span> (<span class="built_in">String</span>(sWhere).toLowerCase()) {
			 <span class="keyword">case</span> <span class="string">"beforebegin"</span>:
				 r.setStartBefore(<span class="keyword">this</span>);
				 df = r.createContextualFragment(sHTML);
				 <span class="keyword">this</span>.parentNode.insertBefore(df, <span class="keyword">this</span>);
			 	<span class="keyword">break</span>;
			 <span class="keyword">case</span> <span class="string">"afterbegin"</span>:
			 	r.selectNodeContents(<span class="keyword">this</span>);
				r.collapse(<span class="literal">true</span>);
			 	df = r.createContextualFragment(sHTML);
				 <span class="keyword">this</span>.insertBefore(df, <span class="keyword">this</span>.firstChild);
				 <span class="keyword">break</span>;
			 <span class="keyword">case</span> <span class="string">"beforeend"</span>:
				 r.selectNodeContents(<span class="keyword">this</span>);
				 r.collapse(<span class="literal">false</span>);
				 df = r.createContextualFragment(sHTML);
				 <span class="keyword">this</span>.appendChild(df);
				 <span class="keyword">break</span>;
			 <span class="keyword">case</span> <span class="string">"afterend"</span>:
				 r.setStartAfter(<span class="keyword">this</span>);
				 df = r.createContextualFragment(sHTML);
				 <span class="keyword">this</span>.parentNode.insertBefore(df, <span class="keyword">this</span>.nextSibling);
				 <span class="keyword">break</span>;
		 }
	 };
}
</pre></figure>


<p>参考文档：</p>
<ul>
<li>Professional JavaScript for Web Developers(Wrox)</li>
<li>Mozilla Develop Center Document</li>
</ul>
<p>-- EOF --</p>
]]></content>
    <summary type="html"><![CDATA[<ul>
<li><a href="http://rank.im/2006/09/30/javascript-dom-range-1/">Javascript 标准 DOM Range 操作 (1)</a></li>
<li><a href="http://rank.im/2006/09/30/javascript-dom-range-2/">Javascript 标准 DOM Range 操作 (2)</a></li>
</ul>
<h2 id="-range-">从 Range 中插入一些数据</h2>
<p>前一节的几个方法解决了如何移除 Range 中所选中的 fragment 。
现在来看， insertNode() 方法可以插入一个节点到 Range 中。</p>
<p>假如我想把以下的节点插如 Range 中，将如何操作呢？</p>
<figure class="highlight html"><pre><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: red"</span>&gt;</span>Inserted text<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
</pre></figure>



]]></summary>
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
</feed>
