<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[rank's blog]]></title>
  <subtitle><![CDATA[Border is just for crossing]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://rank.im/"/>
  <updated>2014-03-14T15:53:49.379Z</updated>
  <id>http://rank.im/</id>
  
  <author>
    <name><![CDATA[rank]]></name>
    <email><![CDATA[ranklau@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用hexo在github page搭建博客]]></title>
    <link href="http://rank.im/2014/03/10/hexo-for-blog/"/>
    <id>http://rank.im/2014/03/10/hexo-for-blog/</id>
    <published>2014-03-10T13:40:27.000Z</published>
    <updated>2014-03-11T13:36:04.000Z</updated>
    <content type="html"><![CDATA[<p>这两天把博客新迁在github page上，这两天抽空注册了新域名，并且在github pages上搭建了新的博客，还用了逼格极高的hexo。 </p>
<p>在github pages上搭建静态博客不只hexo，排名前5的系统有：</p>
<ul>
<li><a href="https://github.com/mojombo/jekyll" target="_blank">mojombo/jekyll</a>  最著名的静态博客引擎(ruby) </li>
<li><a href="https://github.com/imathis/octopress" target="_blank">imathis/octopress</a>  jekyll的一个框架，降低了使用难度</li>
<li><a href="https://github.com/tommy351/hexo" target="_blank">tommy351/hexo</a>  使用node编写的静态博客生成器</li>
<li><a href="https://github.com/getpelican/pelican" target="_blank">getpelican/pelican</a>  Python编写的静态博客生成器</li>
<li><a href="https://github.com/lepture/liquidluck" target="_blank">lepture/liquidluck</a>  同样也是Python的系统</li>
</ul>
<p>官方推荐的是 <a href="https://github.com/mojombo/jekyll" target="_blank">jekyll</a>。</p>
<p>我用hexo主要想借机多熟悉下node，另外也先看了简介使用，感觉hexo上手也相对容易，markdown语言来写内容。<br>如果你想对这几种静态博客进行系统比较的话，可自行测试，或 <a href="http://www.zhihu.com/question/21981094" target="_blank">参考这篇贴子</a>。</p>
<p>hexo的配置及使用官方有比较详细的 <a href="http://zespia.tw/hexo/docs/" target="_blank">文档</a> ，有一位热心同学写了较为详细的博文 《<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank">hexo你的博客</a>》 。  </p>
<p>有一些问题他没有提及，我补充一下：</p>
<ul>
<li><a href="https://github.com/tommy351/hexo/wiki/Themes" target="_blank">这里</a> 有详细的官方推荐皮肤。目前我使用的是<a href="https://github.com/heroicyang/hexo-theme-modernist" target="_blank">modernist</a>，如果你对皮肤要求比较高的话，恐怕theme上没有太满意的，只能自己设计。:(</li>
<li><a href="http://zespia.tw/hexo/docs/" target="_blank">文档</a>。看上去挺全的，但很多地方『点到即止』，所以才看到有很多使用说明都是自己搭建过的同学写出来的经验之谈，不过这没关系，结合google baidu来使用就可以了。</li>
<li><a href="http://zespia.tw/hexo/docs/migration.html" target="_blank">迁移</a>。 关键的功能从rss导入功能
&quot;hexo migrate rss <a href="http://rank.im/atom.xml">http://rank.im/atom.xml</a>&quot; 居然不能用。我哪天fix了放出来给大家。</li>
</ul>
]]></content>
    
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[换域名，重新开博]]></title>
    <link href="http://rank.im/2014/03/07/new-blog-start/"/>
    <id>http://rank.im/2014/03/07/new-blog-start/</id>
    <published>2014-03-07T09:04:20.000Z</published>
    <updated>2014-03-10T13:32:21.000Z</updated>
    <content type="html"><![CDATA[<p>注册了一个比较帅的域名rank.im，用于个人站点。<br>把原来的很古老的博客系统换成现在比较流行，逼格比较高的hexo。  </p>
<p>虽然原来我的博客在G reader的订阅数也有1K多，从头再开始是个不错的选择。:)<br>此篇是个新的开始。</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[推荐android/ios开发切图神器cutandslice]]></title>
    <link href="http://rank.im/2013/10/09/cutandslice/"/>
    <id>http://rank.im/2013/10/09/cutandslice/</id>
    <published>2013-10-09T11:12:05.000Z</published>
    <updated>2014-03-11T06:26:58.000Z</updated>
    <content type="html"><![CDATA[<p>在多端开发时切图是个很痛苦的事，如果有一个很好的工具必将解决掉很多很繁琐的工作。<br>最近试用了一款软件『cutandslice』，觉得不错，推荐给大家。<br>官网：<a href="http://www.cutandslice.me/" target="_blank">http://www.cutandslice.me/</a><br>作者从简介上来看是一名ue。  </p>
<p>用了之后你会发现其实开发的原理不难：<br>用了很多ps里自己的宏来解决问题，程序只处理了规则（rule）。这个思路真赞。</p>
<p><img src="http://www.cutandslice.me/css/layout/v1/ui/plugin.png" alt="&#39;cutandslice&#39;"></p>
<p>cutandslice能解决你下面的问题：</p>
<ul>
<li>解决ios的@2x.png的分辩率问题</li>
<li>解决android的多分辩率的问题</li>
<li>解决web下也需要导出图片的问题</li>
<li>自动切图 - 注意是切图，不是生成html。根据一些简单规则自动切好图片放到相应的文件夹里</li>
</ul>
<p>他的规则也非常简单，只有三条：</p>
<ol>
<li>要输出图的单位以图层文件夹(组)为单位， 文件夹命名末尾加『@』为结束符。并且，自动切除边界外透明的像素。</li>
<li>以『#』名字命名的图层可以认为是选择图片输出的边界。<br>如：输出背景图可将图层组命名为『bg@』，组里有两个图层，1是大背景；2是横向1个px形状图层,并且此图层命名为『#』。</li>
<li>button是一种特殊的组。以『_BTN』结尾认为是按钮，有多种状态支持：<ul>
<li>normal</li>
<li>hover</li>
<li>clicked / pressed</li>
<li>selected</li>
<li>disabled</li>
</ul>
</li>
</ol>
<p>输出图片时也会自动按btn_xxx_normal/btn_xxx_hover命名，非常方便。</p>
<p>要看更详细的使用说明，可移步：<br><a href="http://www.zcool.com.cn/article/ZNDYzODA=.html" target="_blank">http://www.zcool.com.cn/article/ZNDYzODA=.html</a></p>
]]></content>
    
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[取得当前脚本元素的路径的一个特例]]></title>
    <link href="http://rank.im/2012/12/13/get-script-path/"/>
    <id>http://rank.im/2012/12/13/get-script-path/</id>
    <published>2012-12-13T06:54:40.000Z</published>
    <updated>2014-03-14T15:33:24.000Z</updated>
    <content type="html"><![CDATA[<p>在正常情况下，无 defer 或 async 属性要准确取得当前脚本执行路径，在不同浏览器里有两种办法：</p>
<ol>
<li>在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript" target="_blank">MDC</a> 里可查看到用 document.currentScript 拿到当前运用的 script 路径。除此属性外还可通过它的子属性 「document.currentScript.async」 来查看「异步」还是「同步」加载。</li>
<li>用 document.scripts 得到最后一个script.src，但需注意 readyState 是否为 「interactive」状态。</li>
</ol>
<p>简单实现代码如下：</p>
<pre><code>function getCurrentScriptPath() {
     //currentScript
     if (document.hasOwnProperty(&#39;currentScript&#39;)) {
       return document.currentScript.src;
     }
     var scripts = document.scripts || document.getElementsByTagName(&#39;script&#39;),
       len = scripts.length,
       state = &#39;interactive&#39;;
     //兼容IE
     for (var i=0; i &lt;len; i++) {
       if (scripts[i].readyState==state) {
         return scripts[i].src;
       }
     }
     //webkit
     return scripts[len-1].src;
}
</code></pre><p>最近在开发中遇到一个 readyState 在 IE 下的特例：</p>
<ul>
<li>page.html 里引入一个外链的脚本 a.js。</li>
<li>a.js 里有两个外链脚本：a.a.js 和 a.b.js。「注：这是用 document.write 来引入脚本。」</li>
</ul>
<p>page.html代码：</p>
<pre><code>&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;script src=&quot;a.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>a.js代码：</p>
<pre><code>document.write(&#39;&lt;script src=&quot;a.a.js&quot;&gt;&lt;\/script&gt;&#39;);
document.write(&#39;&lt;script src=&quot;a.b.js&quot;&gt;&lt;\/script&gt;&#39;);
</code></pre><p>在浏览器 IE6 至 IE10 里：</p>
<p>我们在 a.a.js 里将所有脚本元素打印出 readyState ：</p>
<ul>
<li>a.js -- complete</li>
<li>a.a.js -- interactive</li>
<li>a.b.js -- loaded</li>
</ul>
<p>上述的 log 告诉我们，从 readyState 状态上看:<br>其实 IE 里已经加载了 a.js, a.a.js, a.b.js 了。</p>
]]></content>
    
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用户行为系统 如何记录行为数据]]></title>
    <link href="http://rank.im/2011/04/07/user-behavior-record-data/"/>
    <id>http://rank.im/2011/04/07/user-behavior-record-data/</id>
    <published>2011-04-07T15:45:43.000Z</published>
    <updated>2014-03-14T15:53:44.000Z</updated>
    <content type="html"><![CDATA[<p>最近准备把我主持并负责的前端用户行为系统开源了，这个系统我们内部命名为 marmot。中文为「土拨鼠」，有挖掘之意。
除我之外，还有两位开发人员分别是：seven 和 cyhello。</p>
<p>本篇文章简短的说明一下 marmot 的 log 重点问题：</p>
<ol>
<li>解决不同分辩率的策略.</li>
<li>解决粒度过细的问题.</li>
<li>还原路径问题.</li>
<li>何时发回数据及数据量的问题</li>
</ol>
<h2 id="-">分辩率策略</h2>
<p>默认原点以p(0,0)开始计算,如果是定宽页面,p(0,0)坐标在不同辩率下得到的坐标是不同的.如何解决这一问题.
普遍情况下会采取截面坐标. 分析目前页面几种类型：</p>
<ul>
<li>页面居左布局原点坐标从 p(0,0) 开始计算。</li>
<li>页面居中布局原点坐标从 p(document.documentElement.scrollWidth/2|0,0) 开始计算。</li>
<li>百分比的宽其实也是可以定位的，原理也是引入相对坐标系，但也有一些劣势，这里不展开了。</li>
</ul>
<h2 id="-">页面像素粒度切分</h2>
<p>每个页面默认粒度为 pixel(1,1)，即 1 像素为单位。 这样的优点是数据不失真，但缺点则是数据量传输和存储量大。</p>
<p>大多数时候我们是不需要按 pixel(1,1) 来计算的。而解决这一问题的思路很简单：</p>
<ul>
<li>页面做先 grid 化, pixel(n,n)。</li>
<li>数量为: Math.floor(document.documentElement.scrollWidth/n)。「n为象素比例尺」</li>
</ul>
<h2 id="-">还原路径</h2>
<ul>
<li>可以序列化DOM path成selector。</li>
<li>以previousSibling + ancestor为基础不断向上递归出presudo selector(伪selector)。</li>
</ul>
<h2 id="-">何时发回及发回数据量</h2>
<p>beforeunload异步发回。
数据量不会太大, HTTP 里 GET 方式请求我们所知：</p>
<ul>
<li>IE6 2K 数据(已知)。</li>
<li>IE7+5K 左右(记得之前我测过，印象中是这个数据)，非 IE 都有 &gt;= 2K 的数据量。</li>
</ul>
<p>肯定有人问题发回的比例是多少，据 dron 同学统计过约80%左右。<br>虽说不是绝对发回来，但足够你用。<br>采样率 5K~1W 左右 pv 操作, 数据最大 2K*1W 约 20~30M log不算大。</p>
]]></content>
    
    
      <category term="tech" scheme="http://rank.im/categories/tech/"/>
    
  </entry>
  
</feed>
